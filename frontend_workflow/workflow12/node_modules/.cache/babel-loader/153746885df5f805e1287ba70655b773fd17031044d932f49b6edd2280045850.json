{"ast":null,"code":"var _jsxFileName = \"/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\n// import axios from 'axios';\n\n// const ViewTree = () => {\n//   const [nodes, setNodes] = useState([]);\n//   const [edges, setEdges] = useState([]);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         // const response = await axios.get('http://localhost:8080/api/graph-data');\n//         const response = {\n//           \"GenderCheck\": {\n//               \"PincodeCheck\": {\n//                   \"key\": 0,\n//                   \"value\": \"Male\"\n//               },\n//               \"LoanStatus\": {\n//                   \"key\": 2,\n//                   \"value\": \"Female\"\n//               }\n//           },\n//           \"PincodeCheck\": {\n//               \"LoanStatus\": {\n//                   \"key\": 3,\n//                   \"value\": \"Starts with 40\"\n//               }\n//           },\n//           \"DobCheck\": {\n//               \"GenderCheck\": {\n//                   \"key\": 0,\n//                   \"value\": \"age>25\"\n//               }\n//           }\n//       };\n//         processGraphData(response);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const processGraphData = (data) => {\n//     const newNodes = [];\n//     const newEdges = [];\n//     const positions = {};\n//     let yOffset = 0;\n\n//     // Function to calculate position\n//     const calculatePosition = (node) => {\n//       if (!positions[node]) {\n//         positions[node] = { x: 250, y: yOffset };\n//         yOffset += 100;\n//       }\n//       return positions[node];\n//     };\n\n//     Object.keys(data).forEach((source) => {\n//       if (!newNodes.find((node) => node.id === source)) {\n//         newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\n//       }\n//       Object.keys(data[source]).forEach((target) => {\n//         if (!newNodes.find((node) => node.id === target)) {\n//           newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\n//         }\n//         const { key, value } = data[source][target];\n//         newEdges.push({\n//           id: `e${source}-${target}`,\n//           source,\n//           target,\n//           label: value,\n//           style: { stroke: `hsl(${key * 36}, 100%, 50%)` }, // Coloring based on key\n//         });\n//       });\n//     });\n\n//     setNodes(newNodes);\n//     setEdges(newEdges);\n//   };\n\n//   return (\n//     <div style={{ height: 1000 }}>\n//       <ReactFlow nodes={nodes} edges={edges} fitView>\n//         <MiniMap />\n//         <Controls />\n//         <Background />\n//       </ReactFlow>\n//     </div>\n//   );\n// };\n\n// export default ViewTree;\n\n// import React from 'react';\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\n\n// // Define the nodes\n// const nodes = [\n//   // Start Node\n//   { id: '1', data: { label: 'Start' }, position: { x: 250, y: 5 } },\n\n//   // Input Node\n//   { id: '2', data: { label: 'Input: Name, DOB, Gender, Pincode' }, position: { x: 250, y: 100 } },\n\n//   // Check Age Node\n//   { id: '3', data: { label: 'Check Age' }, position: { x: 250, y: 200 } },\n\n//   // Age > 30 Node\n//   { id: '4', data: { label: 'Age > 30' }, position: { x: 100, y: 300 } },\n\n//   // Age < 30 Node\n//   { id: '5', data: { label: 'Age < 30' }, position: { x: 400, y: 300 } },\n\n//   // Update DB Node for Age < 30\n//   { id: '6', data: { label: 'Update DB: status = \\'loan_approved\\' and dob_less_than_30 = \\'Y\\'' }, position: { x: 400, y: 400 } },\n\n//   // End Node for Age < 30\n//   { id: '7', data: { label: 'End' }, position: { x: 400, y: 500 } },\n\n//   // Update DB Node for Age > 30\n//   { id: '8', data: { label: 'Update DB: dob_less_than_30 = \\'N\\'' }, position: { x: 100, y: 400 } },\n\n//   // Gender Check Node\n//   { id: '9', data: { label: 'Check Gender' }, position: { x: 100, y: 500 } },\n\n//   // Male Node\n//   { id: '10', data: { label: 'Gender = Male' }, position: { x: -50, y: 600 } },\n\n//   // Female Node\n//   { id: '11', data: { label: 'Gender = Female' }, position: { x: 350, y: 600 } },\n\n//   // Update DB Node for Female\n//   { id: '12', data: { label: 'Update DB: status = \\'loan_approved\\'' }, position: { x: 350, y: 700 } },\n//     // End Node for female\n//     { id: '22', data: { label: 'End' }, position: { x: 350, y: 800 } },\n\n//   // Pincode Check Node\n//   { id: '13', data: { label: 'Check Pincode' }, position: { x: -50, y: 700 } },\n\n//   // Pincode Starts with '40' Node\n//   { id: '14', data: { label: 'Pincode starts with \\'40\\'' }, position: { x: -300, y: 800 } },\n\n//   // Pincode Else Node\n//   { id: '15', data: { label: 'Pincode Else' }, position: { x: 150, y: 800 } },\n\n//   // Update DB Node for Pincode Starts with '40'\n//   { id: '17', data: { label: 'Update DB: status = \\'loan_approval_required\\'' }, position: { x: -300, y: 900 } },\n\n//   // End Node for Pincode Starts with '40'\n//   { id: '18', data: { label: 'End' }, position: { x: -300, y: 1000 } },\n\n//   // Update DB Node for Pincode Else\n//   { id: '20', data: { label: 'Update DB: status = \\'loan_approved\\'' }, position: { x: 150, y: 900 } },\n\n//   // End Node for Pincode Else\n//   { id: '21', data: { label: 'End' }, position: { x: 150, y: 1000 } },\n\n// ];\n\n// // Define the edges\n// const edges = [\n//   { id: 'e1', source: '1', target: '2' },\n//   { id: 'e2', source: '2', target: '3' },\n//   { id: 'e3', source: '3', target: '4'},\n//   { id: 'e4', source: '3', target: '5'},\n//   { id: 'e5', source: '5', target: '6' },\n//   { id: 'e6', source: '6', target: '7' },\n//   { id: 'e7', source: '4', target: '8' },\n//   { id: 'e8', source: '8', target: '9' },\n//   { id: 'e9', source: '9', target: '10' },\n//   { id: 'e10', source: '9', target: '11'},\n//   { id: 'e19', source: '12', target: '22'  },// Connect Female to End Node\n//   { id: 'e11', source: '10', target: '13' }, // Male leads to Pincode Check Node\n//   { id: 'e12', source: '13', target: '14' },\n//   { id: 'e13', source: '13', target: '15' },\n//   { id: 'e14', source: '14', target: '17' }, // Pincode Starts with '40' leads to Update DB Node\n//   { id: 'e15', source: '17', target: '18' }, // Update DB Node for Pincode Starts with '40' leads to End\n\n//   { id: 'e16', source: '15', target: '20' }, // Pincode Else leads to Update DB Node\n//   { id: 'e17', source: '20', target: '21' }, // Update DB Node for Pincode Else leads to End\n\n//   { id: 'e18', source: '11', target: '12' },\n\n// ];\n\n// // Define the end node\n// const endNode = { id: '21', data: { label: 'End' }, position: { x: 150, y: 1000 } };\n\n// const ViewTree = () => (\n//   <div style={{ height: 1000 }}>\n//     <ReactFlow nodes={[...nodes, endNode]} edges={edges} fitView>\n//       <MiniMap />\n//       <Controls />\n//       <Background />\n//     </ReactFlow>\n//   </div>\n// );\n\n// export default ViewTree;\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\nimport axios from 'axios';\nimport CustomEdge from './CustomEdge';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewTree = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const reactFlowWrapper = useRef(null);\n\n  // // Function to perform topological sorting and return a map with indices\n  // const topologicalSortWithIndex = (graph) => {\n  //   const visited = new Set();\n  //   const stack = [];\n  //   const indexMap = new Map();\n\n  //   const visit = (node) => {\n  //     if (visited.has(node)) return;\n  //     visited.add(node);\n  //     if (graph[node]) {\n  //       Object.keys(graph[node]).forEach((neighbor) => visit(neighbor));\n  //     }\n  //     stack.push(node);\n  //   };\n\n  //   Object.keys(graph).forEach(visit);\n  //   const sortedNodes = stack.reverse();\n\n  //   // Build the index map\n  //   sortedNodes.forEach((node, index) => {\n  //     indexMap.set(node, index);\n  //   });\n\n  //   return indexMap;\n  // };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        //   const response = {\n        //     \"GenderCheck\": {\n        //         \"PincodeCheck\": {\n        //             \"key\": 0,\n        //             \"value\": \"Male\"\n        //         },\n        //         \"LoanStatus\": {\n        //             \"key\": 2,\n        //             \"value\": \"Female\"\n        //         }\n        //     },\n        //     \"PincodeCheck\": {\n        //         \"LoanStatus\": {\n        //             \"key\": 3,\n        //             \"value\": \"Starts with 40\"\n        //         }\n        //     },\n        //     \"DobCheck\": {\n        //         \"GenderCheck\": {\n        //             \"key\": 0,\n        //             \"value\": \"age>25\"\n        //         }\n        //     }\n        // };\n        const response = {\n          a: {\n            b: {\n              key: 0,\n              value: \"B\"\n            },\n            c: {\n              key: 0,\n              value: \"C\"\n            }\n          },\n          b: {\n            d: {\n              key: 0,\n              value: \"D\"\n            },\n            e: {\n              key: 0,\n              value: \"E\"\n            }\n          },\n          c: {\n            f: {\n              key: 0,\n              value: \"F\"\n            },\n            g: {\n              key: 0,\n              value: \"G\"\n            }\n          },\n          g: {\n            h: {\n              key: 0,\n              value: \"H\"\n            },\n            i: {\n              key: 0,\n              value: \"I\"\n            }\n          }\n        };\n        processGraphData(response);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  let ypos = 0,\n    xpos = 1000,\n    xchange = 50,\n    flag = 1;\n  const processGraphData = data => {\n    const newNodes = [];\n    const newEdges = [];\n    const positions = {};\n\n    // Function to calculate position\n    const calculatePosition = node => {\n      if (!positions[node]) {\n        const curr = flag * xchange;\n        positions[node] = {\n          x: xpos + curr,\n          y: ypos\n        };\n        console.log(positions[node]);\n        console.log(xpos, xchange);\n        if (flag == 1) flag = -1;else flag = 1;\n        ypos += 100;\n        xchange += 50;\n      }\n      return positions[node];\n    };\n    const getEdgeColor = key => {\n      switch (key) {\n        case 0:\n          return 'gray';\n        case 1:\n          return 'green';\n        case 2:\n          return 'yellow';\n        case 3:\n          return 'orange';\n        default:\n          return 'black';\n      }\n    };\n    Object.keys(data).forEach(source => {\n      if (!newNodes.find(node => node.id === source)) {\n        newNodes.push({\n          id: source,\n          data: {\n            label: source\n          },\n          position: calculatePosition(source)\n        });\n      }\n      Object.keys(data[source]).forEach(target => {\n        if (!newNodes.find(node => node.id === target)) {\n          newNodes.push({\n            id: target,\n            data: {\n              label: target\n            },\n            position: calculatePosition(target)\n          });\n        }\n        const {\n          key,\n          value\n        } = data[source][target];\n        console.log(key);\n        newEdges.push({\n          id: `e${source}-${target}`,\n          source,\n          target,\n          type: CustomEdge,\n          label: value,\n          markerEnd: {\n            type: 'arrow'\n          },\n          style: {\n            stroke: getEdgeColor(key)\n          } // Coloring based on key\n        });\n      });\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    ref: reactFlowWrapper,\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 407,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewTree, \"jhHm/61oZxklEsWL1oW/Uo9Ucq4=\");\n_c = ViewTree;\nexport default ViewTree;\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import ReactFlow, { MiniMap, Controls, Background, ReactFlowProvider } from 'react-flow-renderer';\n// import axios from 'axios';\n// import CustomEdge from './CustomEdge';\n\n// // Function to perform topological sorting and return a map with indices\n// const topologicalSortWithIndex = (graph) => {\n//   const visited = new Set();\n//   const stack = [];\n//   const indexMap = new Map();\n\n//   const visit = (node) => {\n//     if (visited.has(node)) return;\n//     visited.add(node);\n//     if (graph[node]) {\n//       Object.keys(graph[node]).forEach((neighbor) => visit(neighbor));\n//     }\n//     stack.push(node);\n//   };\n\n//   Object.keys(graph).forEach(visit);\n//   const sortedNodes = stack.reverse();\n\n//   // Build the index map\n//   sortedNodes.forEach((node, index) => {\n//     indexMap.set(node, index);\n//   });\n\n//   return indexMap;\n// };\n\n// const edgeTypes = {\n//   custom: CustomEdge,\n// };\n\n// const ViewTree = () => {\n//   const [nodes, setNodes] = useState([]);\n//   const [edges, setEdges] = useState([]);\n//   const reactFlowWrapper = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8080/api/graph-data');\n//         const data = response.data;\n//         processGraphData(data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const processGraphData = (data) => {\n//     const newNodes = [];\n//     const newEdges = [];\n//     const indexMap = topologicalSortWithIndex(data);\n//     const positions = {};\n//     let yOffset = 0;\n\n//     // Function to calculate position based on index\n//     const calculatePosition = (node) => {\n//       if (!positions[node]) {\n//         positions[node] = { x: 250, y: yOffset + indexMap.get(node) * 100 };\n//       }\n//       return positions[node];\n//     };\n\n//     // Function to determine the edge color based on the key value\n//     const getEdgeColor = (key) => {\n//       switch (key) {\n//         case 0:\n//           return 'gray';\n//         case 1:\n//           return 'green';\n//         case 2:\n//           return 'yellow';\n//         case 3:\n//           return 'orange';\n//         default:\n//           return 'black';\n//       }\n//     };\n\n//     Object.keys(data).forEach((source) => {\n//       if (!newNodes.find((node) => node.id === source)) {\n//         newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\n//       }\n//       if (data[source]) {\n//         Object.keys(data[source]).forEach((target) => {\n//           if (!newNodes.find((node) => node.id === target)) {\n//             newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\n//           }\n//           const { key, value } = data[source][target];\n//           newEdges.push({\n//             id: `e${source}-${target}`,\n//             source,\n//             target,\n//             type: 'custom',\n//             data: { label: value },\n//             style: { stroke: getEdgeColor(key) },\n//             markerEnd: {\n//               type: 'arrowclosed',\n//             },\n//           });\n//         });\n//       }\n//     });\n\n//     setNodes(newNodes);\n//     setEdges(newEdges);\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }} ref={reactFlowWrapper}>\n//       <ReactFlowProvider>\n//         <ReactFlow nodes={nodes} edges={edges} edgeTypes={edgeTypes} fitView>\n//           <MiniMap />\n//           <Controls />\n//           <Background />\n//         </ReactFlow>\n//       </ReactFlowProvider>\n//     </div>\n//   );\n// };\n\n// export default ViewTree;\nvar _c;\n$RefreshReg$(_c, \"ViewTree\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ReactFlow","MiniMap","Controls","Background","axios","CustomEdge","jsxDEV","_jsxDEV","ViewTree","_s","nodes","setNodes","edges","setEdges","reactFlowWrapper","fetchData","response","a","b","key","value","c","d","e","f","g","h","i","processGraphData","error","console","ypos","xpos","xchange","flag","data","newNodes","newEdges","positions","calculatePosition","node","curr","x","y","log","getEdgeColor","Object","keys","forEach","source","find","id","push","label","position","target","type","markerEnd","style","stroke","height","ref","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx"],"sourcesContent":["\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\n// import axios from 'axios';\r\n\r\n// const ViewTree = () => {\r\n//   const [nodes, setNodes] = useState([]);\r\n//   const [edges, setEdges] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         // const response = await axios.get('http://localhost:8080/api/graph-data');\r\n//         const response = {\r\n//           \"GenderCheck\": {\r\n//               \"PincodeCheck\": {\r\n//                   \"key\": 0,\r\n//                   \"value\": \"Male\"\r\n//               },\r\n//               \"LoanStatus\": {\r\n//                   \"key\": 2,\r\n//                   \"value\": \"Female\"\r\n//               }\r\n//           },\r\n//           \"PincodeCheck\": {\r\n//               \"LoanStatus\": {\r\n//                   \"key\": 3,\r\n//                   \"value\": \"Starts with 40\"\r\n//               }\r\n//           },\r\n//           \"DobCheck\": {\r\n//               \"GenderCheck\": {\r\n//                   \"key\": 0,\r\n//                   \"value\": \"age>25\"\r\n//               }\r\n//           }\r\n//       };\r\n//         processGraphData(response);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const processGraphData = (data) => {\r\n//     const newNodes = [];\r\n//     const newEdges = [];\r\n//     const positions = {};\r\n//     let yOffset = 0;\r\n\r\n//     // Function to calculate position\r\n//     const calculatePosition = (node) => {\r\n//       if (!positions[node]) {\r\n//         positions[node] = { x: 250, y: yOffset };\r\n//         yOffset += 100;\r\n//       }\r\n//       return positions[node];\r\n//     };\r\n\r\n//     Object.keys(data).forEach((source) => {\r\n//       if (!newNodes.find((node) => node.id === source)) {\r\n//         newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n//       }\r\n//       Object.keys(data[source]).forEach((target) => {\r\n//         if (!newNodes.find((node) => node.id === target)) {\r\n//           newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n//         }\r\n//         const { key, value } = data[source][target];\r\n//         newEdges.push({\r\n//           id: `e${source}-${target}`,\r\n//           source,\r\n//           target,\r\n//           label: value,\r\n//           style: { stroke: `hsl(${key * 36}, 100%, 50%)` }, // Coloring based on key\r\n//         });\r\n//       });\r\n//     });\r\n\r\n//     setNodes(newNodes);\r\n//     setEdges(newEdges);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ height: 1000 }}>\r\n//       <ReactFlow nodes={nodes} edges={edges} fitView>\r\n//         <MiniMap />\r\n//         <Controls />\r\n//         <Background />\r\n//       </ReactFlow>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewTree;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\n \r\n// // Define the nodes\r\n// const nodes = [\r\n//   // Start Node\r\n//   { id: '1', data: { label: 'Start' }, position: { x: 250, y: 5 } },\r\n \r\n//   // Input Node\r\n//   { id: '2', data: { label: 'Input: Name, DOB, Gender, Pincode' }, position: { x: 250, y: 100 } },\r\n \r\n//   // Check Age Node\r\n//   { id: '3', data: { label: 'Check Age' }, position: { x: 250, y: 200 } },\r\n \r\n//   // Age > 30 Node\r\n//   { id: '4', data: { label: 'Age > 30' }, position: { x: 100, y: 300 } },\r\n \r\n//   // Age < 30 Node\r\n//   { id: '5', data: { label: 'Age < 30' }, position: { x: 400, y: 300 } },\r\n \r\n//   // Update DB Node for Age < 30\r\n//   { id: '6', data: { label: 'Update DB: status = \\'loan_approved\\' and dob_less_than_30 = \\'Y\\'' }, position: { x: 400, y: 400 } },\r\n \r\n//   // End Node for Age < 30\r\n//   { id: '7', data: { label: 'End' }, position: { x: 400, y: 500 } },\r\n \r\n//   // Update DB Node for Age > 30\r\n//   { id: '8', data: { label: 'Update DB: dob_less_than_30 = \\'N\\'' }, position: { x: 100, y: 400 } },\r\n \r\n//   // Gender Check Node\r\n//   { id: '9', data: { label: 'Check Gender' }, position: { x: 100, y: 500 } },\r\n \r\n//   // Male Node\r\n//   { id: '10', data: { label: 'Gender = Male' }, position: { x: -50, y: 600 } },\r\n \r\n//   // Female Node\r\n//   { id: '11', data: { label: 'Gender = Female' }, position: { x: 350, y: 600 } },\r\n \r\n \r\n//   // Update DB Node for Female\r\n//   { id: '12', data: { label: 'Update DB: status = \\'loan_approved\\'' }, position: { x: 350, y: 700 } },\r\n//     // End Node for female\r\n//     { id: '22', data: { label: 'End' }, position: { x: 350, y: 800 } },\r\n \r\n//   // Pincode Check Node\r\n//   { id: '13', data: { label: 'Check Pincode' }, position: { x: -50, y: 700 } },\r\n \r\n//   // Pincode Starts with '40' Node\r\n//   { id: '14', data: { label: 'Pincode starts with \\'40\\'' }, position: { x: -300, y: 800 } },\r\n \r\n//   // Pincode Else Node\r\n//   { id: '15', data: { label: 'Pincode Else' }, position: { x: 150, y: 800 } },\r\n \r\n//   // Update DB Node for Pincode Starts with '40'\r\n//   { id: '17', data: { label: 'Update DB: status = \\'loan_approval_required\\'' }, position: { x: -300, y: 900 } },\r\n \r\n//   // End Node for Pincode Starts with '40'\r\n//   { id: '18', data: { label: 'End' }, position: { x: -300, y: 1000 } },\r\n \r\n//   // Update DB Node for Pincode Else\r\n//   { id: '20', data: { label: 'Update DB: status = \\'loan_approved\\'' }, position: { x: 150, y: 900 } },\r\n \r\n//   // End Node for Pincode Else\r\n//   { id: '21', data: { label: 'End' }, position: { x: 150, y: 1000 } },\r\n \r\n// ];\r\n \r\n// // Define the edges\r\n// const edges = [\r\n//   { id: 'e1', source: '1', target: '2' },\r\n//   { id: 'e2', source: '2', target: '3' },\r\n//   { id: 'e3', source: '3', target: '4'},\r\n//   { id: 'e4', source: '3', target: '5'},\r\n//   { id: 'e5', source: '5', target: '6' },\r\n//   { id: 'e6', source: '6', target: '7' },\r\n//   { id: 'e7', source: '4', target: '8' },\r\n//   { id: 'e8', source: '8', target: '9' },\r\n//   { id: 'e9', source: '9', target: '10' },\r\n//   { id: 'e10', source: '9', target: '11'},\r\n//   { id: 'e19', source: '12', target: '22'  },// Connect Female to End Node\r\n//   { id: 'e11', source: '10', target: '13' }, // Male leads to Pincode Check Node\r\n//   { id: 'e12', source: '13', target: '14' },\r\n//   { id: 'e13', source: '13', target: '15' },\r\n//   { id: 'e14', source: '14', target: '17' }, // Pincode Starts with '40' leads to Update DB Node\r\n//   { id: 'e15', source: '17', target: '18' }, // Update DB Node for Pincode Starts with '40' leads to End\r\n \r\n//   { id: 'e16', source: '15', target: '20' }, // Pincode Else leads to Update DB Node\r\n//   { id: 'e17', source: '20', target: '21' }, // Update DB Node for Pincode Else leads to End\r\n \r\n//   { id: 'e18', source: '11', target: '12' },\r\n \r\n// ];\r\n \r\n// // Define the end node\r\n// const endNode = { id: '21', data: { label: 'End' }, position: { x: 150, y: 1000 } };\r\n \r\n// const ViewTree = () => (\r\n//   <div style={{ height: 1000 }}>\r\n//     <ReactFlow nodes={[...nodes, endNode]} edges={edges} fitView>\r\n//       <MiniMap />\r\n//       <Controls />\r\n//       <Background />\r\n//     </ReactFlow>\r\n//   </div>\r\n// );\r\n \r\n\r\n// export default ViewTree;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\nimport axios from 'axios';\r\nimport CustomEdge from './CustomEdge'\r\nconst ViewTree = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const reactFlowWrapper = useRef(null);\r\n\r\n\r\n  // // Function to perform topological sorting and return a map with indices\r\n// const topologicalSortWithIndex = (graph) => {\r\n//   const visited = new Set();\r\n//   const stack = [];\r\n//   const indexMap = new Map();\r\n  \r\n//   const visit = (node) => {\r\n//     if (visited.has(node)) return;\r\n//     visited.add(node);\r\n//     if (graph[node]) {\r\n//       Object.keys(graph[node]).forEach((neighbor) => visit(neighbor));\r\n//     }\r\n//     stack.push(node);\r\n//   };\r\n\r\n//   Object.keys(graph).forEach(visit);\r\n//   const sortedNodes = stack.reverse();\r\n  \r\n//   // Build the index map\r\n//   sortedNodes.forEach((node, index) => {\r\n//     indexMap.set(node, index);\r\n//   });\r\n\r\n//   return indexMap;\r\n// };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n      //   const response = {\r\n      //     \"GenderCheck\": {\r\n      //         \"PincodeCheck\": {\r\n      //             \"key\": 0,\r\n      //             \"value\": \"Male\"\r\n      //         },\r\n      //         \"LoanStatus\": {\r\n      //             \"key\": 2,\r\n      //             \"value\": \"Female\"\r\n      //         }\r\n      //     },\r\n      //     \"PincodeCheck\": {\r\n      //         \"LoanStatus\": {\r\n      //             \"key\": 3,\r\n      //             \"value\": \"Starts with 40\"\r\n      //         }\r\n      //     },\r\n      //     \"DobCheck\": {\r\n      //         \"GenderCheck\": {\r\n      //             \"key\": 0,\r\n      //             \"value\": \"age>25\"\r\n      //         }\r\n      //     }\r\n      // };\r\n      const response = {\r\n        a: {\r\n          b: {\r\n            key: 0,\r\n            value: \"B\",\r\n          },\r\n          c: {\r\n            key: 0,\r\n            value: \"C\",\r\n          },\r\n        },\r\n        b: {\r\n          d: {\r\n            key: 0,\r\n            value: \"D\",\r\n          },\r\n          e: {\r\n            key: 0,\r\n            value: \"E\",\r\n          },\r\n        },\r\n        c: {\r\n          f: {\r\n            key: 0,\r\n            value: \"F\",\r\n          },\r\n          g: {\r\n            key: 0,\r\n            value: \"G\",\r\n          },\r\n        },\r\n        g: {\r\n          h: {\r\n            key: 0,\r\n            value: \"H\",\r\n          },\r\n          i: {\r\n            key: 0,\r\n            value: \"I\",\r\n          },\r\n        },\r\n      };\r\n       \r\n        processGraphData(response);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  let ypos = 0, xpos = 1000, xchange = 50, flag = 1;\r\n\r\n  const processGraphData = (data) => {\r\n    const newNodes = [];\r\n    const newEdges = [];\r\n    const positions = {};\r\n\r\n    // Function to calculate position\r\n    const calculatePosition = (node) => {\r\n      if (!positions[node]) {\r\n        const curr = (flag*xchange);\r\n        positions[node] = { x: xpos+curr, y: ypos };\r\n        console.log(positions[node]);\r\n        console.log(xpos, xchange);\r\n        if(flag == 1) flag = -1;\r\n        else flag = 1;\r\n        ypos += 100;\r\n        xchange += 50;\r\n      }\r\n      return positions[node];\r\n    };\r\n\r\n\r\n    const getEdgeColor = (key) => {\r\n      switch (key) {\r\n        case 0:\r\n          return 'gray';\r\n        case 1:\r\n          return 'green';\r\n        case 2:\r\n          return 'yellow';\r\n        case 3:\r\n          return 'orange';\r\n        default:\r\n          return 'black';\r\n      }\r\n    };\r\n\r\n    Object.keys(data).forEach((source) => {\r\n      if (!newNodes.find((node) => node.id === source)) {\r\n        newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n      }\r\n      Object.keys(data[source]).forEach((target) => {\r\n        if (!newNodes.find((node) => node.id === target)) {\r\n          newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n        }\r\n        const { key, value } = data[source][target];\r\n        console.log(key);\r\n        newEdges.push({\r\n          id: `e${source}-${target}`,\r\n          source,\r\n          target,\r\n          type: CustomEdge,\r\n          label: value,\r\n          markerEnd: {\r\n            type: 'arrow',\r\n          },\r\n          style: { stroke: getEdgeColor(key) }, // Coloring based on key\r\n        });\r\n      });\r\n    });\r\n\r\n    setNodes(newNodes);\r\n    setEdges(newEdges);\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: '100vh' }} ref={reactFlowWrapper}>\r\n      <ReactFlow nodes={nodes} edges={edges} fitView>\r\n        <MiniMap />\r\n        <Controls />\r\n        <Background />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewTree;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState, useRef } from 'react';\r\n// import ReactFlow, { MiniMap, Controls, Background, ReactFlowProvider } from 'react-flow-renderer';\r\n// import axios from 'axios';\r\n// import CustomEdge from './CustomEdge';\r\n\r\n// // Function to perform topological sorting and return a map with indices\r\n// const topologicalSortWithIndex = (graph) => {\r\n//   const visited = new Set();\r\n//   const stack = [];\r\n//   const indexMap = new Map();\r\n  \r\n//   const visit = (node) => {\r\n//     if (visited.has(node)) return;\r\n//     visited.add(node);\r\n//     if (graph[node]) {\r\n//       Object.keys(graph[node]).forEach((neighbor) => visit(neighbor));\r\n//     }\r\n//     stack.push(node);\r\n//   };\r\n\r\n//   Object.keys(graph).forEach(visit);\r\n//   const sortedNodes = stack.reverse();\r\n  \r\n//   // Build the index map\r\n//   sortedNodes.forEach((node, index) => {\r\n//     indexMap.set(node, index);\r\n//   });\r\n\r\n//   return indexMap;\r\n// };\r\n\r\n// const edgeTypes = {\r\n//   custom: CustomEdge,\r\n// };\r\n\r\n// const ViewTree = () => {\r\n//   const [nodes, setNodes] = useState([]);\r\n//   const [edges, setEdges] = useState([]);\r\n//   const reactFlowWrapper = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const response = await axios.get('http://localhost:8080/api/graph-data');\r\n//         const data = response.data;\r\n//         processGraphData(data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const processGraphData = (data) => {\r\n//     const newNodes = [];\r\n//     const newEdges = [];\r\n//     const indexMap = topologicalSortWithIndex(data);\r\n//     const positions = {};\r\n//     let yOffset = 0;\r\n\r\n//     // Function to calculate position based on index\r\n//     const calculatePosition = (node) => {\r\n//       if (!positions[node]) {\r\n//         positions[node] = { x: 250, y: yOffset + indexMap.get(node) * 100 };\r\n//       }\r\n//       return positions[node];\r\n//     };\r\n\r\n//     // Function to determine the edge color based on the key value\r\n//     const getEdgeColor = (key) => {\r\n//       switch (key) {\r\n//         case 0:\r\n//           return 'gray';\r\n//         case 1:\r\n//           return 'green';\r\n//         case 2:\r\n//           return 'yellow';\r\n//         case 3:\r\n//           return 'orange';\r\n//         default:\r\n//           return 'black';\r\n//       }\r\n//     };\r\n\r\n//     Object.keys(data).forEach((source) => {\r\n//       if (!newNodes.find((node) => node.id === source)) {\r\n//         newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n//       }\r\n//       if (data[source]) {\r\n//         Object.keys(data[source]).forEach((target) => {\r\n//           if (!newNodes.find((node) => node.id === target)) {\r\n//             newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n//           }\r\n//           const { key, value } = data[source][target];\r\n//           newEdges.push({\r\n//             id: `e${source}-${target}`,\r\n//             source,\r\n//             target,\r\n//             type: 'custom',\r\n//             data: { label: value },\r\n//             style: { stroke: getEdgeColor(key) },\r\n//             markerEnd: {\r\n//               type: 'arrowclosed',\r\n//             },\r\n//           });\r\n//         });\r\n//       }\r\n//     });\r\n\r\n//     setNodes(newNodes);\r\n//     setEdges(newEdges);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ height: '100vh' }} ref={reactFlowWrapper}>\r\n//       <ReactFlowProvider>\r\n//         <ReactFlow nodes={nodes} edges={edges} edgeTypes={edgeTypes} fitView>\r\n//           <MiniMap />\r\n//           <Controls />\r\n//           <Background />\r\n//         </ReactFlow>\r\n//       </ReactFlowProvider>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewTree;\r\n"],"mappings":";;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAaA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAMA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,SAAS,IAAIC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,qBAAqB;AAC9E,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,cAAc;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACrC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,KAAK,EAA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":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}