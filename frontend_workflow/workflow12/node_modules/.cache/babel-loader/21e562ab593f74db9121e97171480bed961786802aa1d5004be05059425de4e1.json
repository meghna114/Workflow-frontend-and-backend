{"ast":null,"code":"var _jsxFileName = \"/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\n// import axios from 'axios';\n\n// const ViewTree = () => {\n//   const [nodes, setNodes] = useState([]);\n//   const [edges, setEdges] = useState([]);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         // const response = await axios.get('http://localhost:8080/api/graph-data');\n//         const response = {\n//           \"GenderCheck\": {\n//               \"PincodeCheck\": {\n//                   \"key\": 0,\n//                   \"value\": \"Male\"\n//               },\n//               \"LoanStatus\": {\n//                   \"key\": 2,\n//                   \"value\": \"Female\"\n//               }\n//           },\n//           \"PincodeCheck\": {\n//               \"LoanStatus\": {\n//                   \"key\": 3,\n//                   \"value\": \"Starts with 40\"\n//               }\n//           },\n//           \"DobCheck\": {\n//               \"GenderCheck\": {\n//                   \"key\": 0,\n//                   \"value\": \"age>25\"\n//               }\n//           }\n//       };\n//         processGraphData(response);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const processGraphData = (data) => {\n//     const newNodes = [];\n//     const newEdges = [];\n//     const positions = {};\n//     let yOffset = 0;\n\n//     // Function to calculate position\n//     const calculatePosition = (node) => {\n//       if (!positions[node]) {\n//         positions[node] = { x: 250, y: yOffset };\n//         yOffset += 100;\n//       }\n//       return positions[node];\n//     };\n\n//     Object.keys(data).forEach((source) => {\n//       if (!newNodes.find((node) => node.id === source)) {\n//         newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\n//       }\n//       Object.keys(data[source]).forEach((target) => {\n//         if (!newNodes.find((node) => node.id === target)) {\n//           newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\n//         }\n//         const { key, value } = data[source][target];\n//         newEdges.push({\n//           id: `e${source}-${target}`,\n//           source,\n//           target,\n//           label: value,\n//           style: { stroke: `hsl(${key * 36}, 100%, 50%)` }, // Coloring based on key\n//         });\n//       });\n//     });\n\n//     setNodes(newNodes);\n//     setEdges(newEdges);\n//   };\n\n//   return (\n//     <div style={{ height: 1000 }}>\n//       <ReactFlow nodes={nodes} edges={edges} fitView>\n//         <MiniMap />\n//         <Controls />\n//         <Background />\n//       </ReactFlow>\n//     </div>\n//   );\n// };\n\n// export default ViewTree;\n\n// import React from 'react';\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\n\n// // Define the nodes\n// const nodes = [\n//   // Start Node\n//   { id: '1', data: { label: 'Start' }, position: { x: 250, y: 5 } },\n\n//   // Input Node\n//   { id: '2', data: { label: 'Input: Name, DOB, Gender, Pincode' }, position: { x: 250, y: 100 } },\n\n//   // Check Age Node\n//   { id: '3', data: { label: 'Check Age' }, position: { x: 250, y: 200 } },\n\n//   // Age > 30 Node\n//   { id: '4', data: { label: 'Age > 30' }, position: { x: 100, y: 300 } },\n\n//   // Age < 30 Node\n//   { id: '5', data: { label: 'Age < 30' }, position: { x: 400, y: 300 } },\n\n//   // Update DB Node for Age < 30\n//   { id: '6', data: { label: 'Update DB: status = \\'loan_approved\\' and dob_less_than_30 = \\'Y\\'' }, position: { x: 400, y: 400 } },\n\n//   // End Node for Age < 30\n//   { id: '7', data: { label: 'End' }, position: { x: 400, y: 500 } },\n\n//   // Update DB Node for Age > 30\n//   { id: '8', data: { label: 'Update DB: dob_less_than_30 = \\'N\\'' }, position: { x: 100, y: 400 } },\n\n//   // Gender Check Node\n//   { id: '9', data: { label: 'Check Gender' }, position: { x: 100, y: 500 } },\n\n//   // Male Node\n//   { id: '10', data: { label: 'Gender = Male' }, position: { x: -50, y: 600 } },\n\n//   // Female Node\n//   { id: '11', data: { label: 'Gender = Female' }, position: { x: 350, y: 600 } },\n\n//   // Update DB Node for Female\n//   { id: '12', data: { label: 'Update DB: status = \\'loan_approved\\'' }, position: { x: 350, y: 700 } },\n//     // End Node for female\n//     { id: '22', data: { label: 'End' }, position: { x: 350, y: 800 } },\n\n//   // Pincode Check Node\n//   { id: '13', data: { label: 'Check Pincode' }, position: { x: -50, y: 700 } },\n\n//   // Pincode Starts with '40' Node\n//   { id: '14', data: { label: 'Pincode starts with \\'40\\'' }, position: { x: -300, y: 800 } },\n\n//   // Pincode Else Node\n//   { id: '15', data: { label: 'Pincode Else' }, position: { x: 150, y: 800 } },\n\n//   // Update DB Node for Pincode Starts with '40'\n//   { id: '17', data: { label: 'Update DB: status = \\'loan_approval_required\\'' }, position: { x: -300, y: 900 } },\n\n//   // End Node for Pincode Starts with '40'\n//   { id: '18', data: { label: 'End' }, position: { x: -300, y: 1000 } },\n\n//   // Update DB Node for Pincode Else\n//   { id: '20', data: { label: 'Update DB: status = \\'loan_approved\\'' }, position: { x: 150, y: 900 } },\n\n//   // End Node for Pincode Else\n//   { id: '21', data: { label: 'End' }, position: { x: 150, y: 1000 } },\n\n// ];\n\n// // Define the edges\n// const edges = [\n//   { id: 'e1', source: '1', target: '2' },\n//   { id: 'e2', source: '2', target: '3' },\n//   { id: 'e3', source: '3', target: '4'},\n//   { id: 'e4', source: '3', target: '5'},\n//   { id: 'e5', source: '5', target: '6' },\n//   { id: 'e6', source: '6', target: '7' },\n//   { id: 'e7', source: '4', target: '8' },\n//   { id: 'e8', source: '8', target: '9' },\n//   { id: 'e9', source: '9', target: '10' },\n//   { id: 'e10', source: '9', target: '11'},\n//   { id: 'e19', source: '12', target: '22'  },// Connect Female to End Node\n//   { id: 'e11', source: '10', target: '13' }, // Male leads to Pincode Check Node\n//   { id: 'e12', source: '13', target: '14' },\n//   { id: 'e13', source: '13', target: '15' },\n//   { id: 'e14', source: '14', target: '17' }, // Pincode Starts with '40' leads to Update DB Node\n//   { id: 'e15', source: '17', target: '18' }, // Update DB Node for Pincode Starts with '40' leads to End\n\n//   { id: 'e16', source: '15', target: '20' }, // Pincode Else leads to Update DB Node\n//   { id: 'e17', source: '20', target: '21' }, // Update DB Node for Pincode Else leads to End\n\n//   { id: 'e18', source: '11', target: '12' },\n\n// ];\n\n// // Define the end node\n// const endNode = { id: '21', data: { label: 'End' }, position: { x: 150, y: 1000 } };\n\n// const ViewTree = () => (\n//   <div style={{ height: 1000 }}>\n//     <ReactFlow nodes={[...nodes, endNode]} edges={edges} fitView>\n//       <MiniMap />\n//       <Controls />\n//       <Background />\n//     </ReactFlow>\n//   </div>\n// );\n\n// export default ViewTree;\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\n// import axios from 'axios';\n\n// const ViewTree = () => {\n//   const [nodes, setNodes] = useState([]);\n//   const [edges, setEdges] = useState([]);\n//   const reactFlowWrapper = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//       //   const response = {\n//       //     \"GenderCheck\": {\n//       //         \"PincodeCheck\": {\n//       //             \"key\": 0,\n//       //             \"value\": \"Male\"\n//       //         },\n//       //         \"LoanStatus\": {\n//       //             \"key\": 2,\n//       //             \"value\": \"Female\"\n//       //         }\n//       //     },\n//       //     \"PincodeCheck\": {\n//       //         \"LoanStatus\": {\n//       //             \"key\": 3,\n//       //             \"value\": \"Starts with 40\"\n//       //         }\n//       //     },\n//       //     \"DobCheck\": {\n//       //         \"GenderCheck\": {\n//       //             \"key\": 0,\n//       //             \"value\": \"age>25\"\n//       //         }\n//       //     }\n//       // };\n//       const response = {\n//         a: {\n//           b: {\n//             key: 0,\n//             value: \"B\",\n//           },\n//           c: {\n//             key: 0,\n//             value: \"C\",\n//           },\n//         },\n//         b: {\n//           d: {\n//             key: 0,\n//             value: \"D\",\n//           },\n//           e: {\n//             key: 0,\n//             value: \"E\",\n//           },\n//         },\n//         c: {\n//           f: {\n//             key: 0,\n//             value: \"F\",\n//           },\n//           g: {\n//             key: 0,\n//             value: \"G\",\n//           },\n//         },\n//         g: {\n//           h: {\n//             key: 0,\n//             value: \"H\",\n//           },\n//           i: {\n//             key: 0,\n//             value: \"I\",\n//           },\n//         },\n//       };\n\n//         processGraphData(response);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   let ypos = 0, xpos = 1000, xchange = 50, flag = 1;\n\n//   const processGraphData = (data) => {\n//     const newNodes = [];\n//     const newEdges = [];\n//     const positions = {};\n\n//     // Function to calculate position\n//     const calculatePosition = (node) => {\n//       if (!positions[node]) {\n//         const curr = (flag*xchange);\n//         positions[node] = { x: xpos+curr, y: ypos };\n//         console.log(positions[node]);\n//         console.log(xpos, xchange);\n//         if(flag == 1) flag = -1;\n//         else flag = 1;\n//         ypos += 100;\n//         xchange += 50;\n//       }\n//       return positions[node];\n//     };\n\n//     const getEdgeColor = (key) => {\n//       switch (key) {\n//         case 0:\n//           return 'gray';\n//         case 1:\n//           return 'green';\n//         case 2:\n//           return 'yellow';\n//         case 3:\n//           return 'orange';\n//         default:\n//           return 'black';\n//       }\n//     };\n\n//     Object.keys(data).forEach((source) => {\n//       if (!newNodes.find((node) => node.id === source)) {\n//         newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\n//       }\n//       Object.keys(data[source]).forEach((target) => {\n//         if (!newNodes.find((node) => node.id === target)) {\n//           newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\n//         }\n//         const { key, value } = data[source][target];\n//         console.log(key);\n//         newEdges.push({\n//           id: `e${source}-${target}`,\n//           source,\n//           target,\n//           label: value,\n//           markerEnd: {\n//             type: 'arrow',\n//           },\n//           style: { stroke: getEdgeColor(key) }, // Coloring based on key\n//         });\n//       });\n//     });\n\n//     setNodes(newNodes);\n//     setEdges(newEdges);\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }} ref={reactFlowWrapper}>\n//       <ReactFlow nodes={nodes} edges={edges} fitView>\n//         <MiniMap />\n//         <Controls />\n//         <Background />\n//       </ReactFlow>\n//     </div>\n//   );\n// };\n\n// export default ViewTree;\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background, ReactFlowProvider } from 'react-flow-renderer';\nimport axios from 'axios';\nimport CustomEdge from './CustomEdge';\n\n// Function to perform topological sorting and return a map with indices\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst topologicalSortWithIndex = graph => {\n  const visited = new Set();\n  const stack = [];\n  const indexMap = new Map();\n  const visit = node => {\n    if (visited.has(node)) return;\n    visited.add(node);\n    if (graph[node]) {\n      Object.keys(graph[node]).forEach(neighbor => visit(neighbor));\n    }\n    stack.push(node);\n  };\n  Object.keys(graph).forEach(visit);\n  const sortedNodes = stack.reverse();\n\n  // Build the index map\n  sortedNodes.forEach((node, index) => {\n    indexMap.set(node, index);\n  });\n  return indexMap;\n};\nconst edgeTypes = {\n  custom: CustomEdge\n};\nconst ViewTree = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const reactFlowWrapper = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/api/graph-data');\n        const data = response.data;\n        processGraphData(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const processGraphData = data => {\n    const newNodes = [];\n    const newEdges = [];\n    const indexMap = topologicalSortWithIndex(data);\n    const positions = {};\n    let yOffset = 0;\n\n    // Function to calculate position based on index\n    const calculatePosition = node => {\n      if (!positions[node]) {\n        positions[node] = {\n          x: 250,\n          y: yOffset + indexMap.get(node) * 100\n        };\n      }\n      return positions[node];\n    };\n\n    // Function to determine the edge color based on the key value\n    const getEdgeColor = key => {\n      switch (key) {\n        case 0:\n          return 'gray';\n        case 1:\n          return 'green';\n        case 2:\n          return 'yellow';\n        case 3:\n          return 'orange';\n        default:\n          return 'black';\n      }\n    };\n    Object.keys(data).forEach(source => {\n      if (!newNodes.find(node => node.id === source)) {\n        newNodes.push({\n          id: source,\n          data: {\n            label: source\n          },\n          position: calculatePosition(source)\n        });\n      }\n      if (data[source]) {\n        Object.keys(data[source]).forEach(target => {\n          if (!newNodes.find(node => node.id === target)) {\n            newNodes.push({\n              id: target,\n              data: {\n                label: target\n              },\n              position: calculatePosition(target)\n            });\n          }\n          const {\n            key,\n            value\n          } = data[source][target];\n          newEdges.push({\n            id: `e${source}-${target}`,\n            source,\n            target,\n            type: 'custom',\n            data: {\n              label: value\n            },\n            style: {\n              stroke: getEdgeColor(key)\n            },\n            markerEnd: {\n              type: 'arrowclosed'\n            }\n          });\n        });\n      }\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    ref: reactFlowWrapper,\n    children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        edgeTypes: edgeTypes,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 509,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewTree, \"jhHm/61oZxklEsWL1oW/Uo9Ucq4=\");\n_c = ViewTree;\nexport default ViewTree;\nvar _c;\n$RefreshReg$(_c, \"ViewTree\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ReactFlow","MiniMap","Controls","Background","ReactFlowProvider","axios","CustomEdge","jsxDEV","_jsxDEV","topologicalSortWithIndex","graph","visited","Set","stack","indexMap","Map","visit","node","has","add","Object","keys","forEach","neighbor","push","sortedNodes","reverse","index","set","edgeTypes","custom","ViewTree","_s","nodes","setNodes","edges","setEdges","reactFlowWrapper","fetchData","response","get","data","processGraphData","error","console","newNodes","newEdges","positions","yOffset","calculatePosition","x","y","getEdgeColor","key","source","find","id","label","position","target","value","type","style","stroke","markerEnd","height","ref","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx"],"sourcesContent":["\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\n// import axios from 'axios';\r\n\r\n// const ViewTree = () => {\r\n//   const [nodes, setNodes] = useState([]);\r\n//   const [edges, setEdges] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         // const response = await axios.get('http://localhost:8080/api/graph-data');\r\n//         const response = {\r\n//           \"GenderCheck\": {\r\n//               \"PincodeCheck\": {\r\n//                   \"key\": 0,\r\n//                   \"value\": \"Male\"\r\n//               },\r\n//               \"LoanStatus\": {\r\n//                   \"key\": 2,\r\n//                   \"value\": \"Female\"\r\n//               }\r\n//           },\r\n//           \"PincodeCheck\": {\r\n//               \"LoanStatus\": {\r\n//                   \"key\": 3,\r\n//                   \"value\": \"Starts with 40\"\r\n//               }\r\n//           },\r\n//           \"DobCheck\": {\r\n//               \"GenderCheck\": {\r\n//                   \"key\": 0,\r\n//                   \"value\": \"age>25\"\r\n//               }\r\n//           }\r\n//       };\r\n//         processGraphData(response);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const processGraphData = (data) => {\r\n//     const newNodes = [];\r\n//     const newEdges = [];\r\n//     const positions = {};\r\n//     let yOffset = 0;\r\n\r\n//     // Function to calculate position\r\n//     const calculatePosition = (node) => {\r\n//       if (!positions[node]) {\r\n//         positions[node] = { x: 250, y: yOffset };\r\n//         yOffset += 100;\r\n//       }\r\n//       return positions[node];\r\n//     };\r\n\r\n//     Object.keys(data).forEach((source) => {\r\n//       if (!newNodes.find((node) => node.id === source)) {\r\n//         newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n//       }\r\n//       Object.keys(data[source]).forEach((target) => {\r\n//         if (!newNodes.find((node) => node.id === target)) {\r\n//           newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n//         }\r\n//         const { key, value } = data[source][target];\r\n//         newEdges.push({\r\n//           id: `e${source}-${target}`,\r\n//           source,\r\n//           target,\r\n//           label: value,\r\n//           style: { stroke: `hsl(${key * 36}, 100%, 50%)` }, // Coloring based on key\r\n//         });\r\n//       });\r\n//     });\r\n\r\n//     setNodes(newNodes);\r\n//     setEdges(newEdges);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ height: 1000 }}>\r\n//       <ReactFlow nodes={nodes} edges={edges} fitView>\r\n//         <MiniMap />\r\n//         <Controls />\r\n//         <Background />\r\n//       </ReactFlow>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewTree;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\n \r\n// // Define the nodes\r\n// const nodes = [\r\n//   // Start Node\r\n//   { id: '1', data: { label: 'Start' }, position: { x: 250, y: 5 } },\r\n \r\n//   // Input Node\r\n//   { id: '2', data: { label: 'Input: Name, DOB, Gender, Pincode' }, position: { x: 250, y: 100 } },\r\n \r\n//   // Check Age Node\r\n//   { id: '3', data: { label: 'Check Age' }, position: { x: 250, y: 200 } },\r\n \r\n//   // Age > 30 Node\r\n//   { id: '4', data: { label: 'Age > 30' }, position: { x: 100, y: 300 } },\r\n \r\n//   // Age < 30 Node\r\n//   { id: '5', data: { label: 'Age < 30' }, position: { x: 400, y: 300 } },\r\n \r\n//   // Update DB Node for Age < 30\r\n//   { id: '6', data: { label: 'Update DB: status = \\'loan_approved\\' and dob_less_than_30 = \\'Y\\'' }, position: { x: 400, y: 400 } },\r\n \r\n//   // End Node for Age < 30\r\n//   { id: '7', data: { label: 'End' }, position: { x: 400, y: 500 } },\r\n \r\n//   // Update DB Node for Age > 30\r\n//   { id: '8', data: { label: 'Update DB: dob_less_than_30 = \\'N\\'' }, position: { x: 100, y: 400 } },\r\n \r\n//   // Gender Check Node\r\n//   { id: '9', data: { label: 'Check Gender' }, position: { x: 100, y: 500 } },\r\n \r\n//   // Male Node\r\n//   { id: '10', data: { label: 'Gender = Male' }, position: { x: -50, y: 600 } },\r\n \r\n//   // Female Node\r\n//   { id: '11', data: { label: 'Gender = Female' }, position: { x: 350, y: 600 } },\r\n \r\n \r\n//   // Update DB Node for Female\r\n//   { id: '12', data: { label: 'Update DB: status = \\'loan_approved\\'' }, position: { x: 350, y: 700 } },\r\n//     // End Node for female\r\n//     { id: '22', data: { label: 'End' }, position: { x: 350, y: 800 } },\r\n \r\n//   // Pincode Check Node\r\n//   { id: '13', data: { label: 'Check Pincode' }, position: { x: -50, y: 700 } },\r\n \r\n//   // Pincode Starts with '40' Node\r\n//   { id: '14', data: { label: 'Pincode starts with \\'40\\'' }, position: { x: -300, y: 800 } },\r\n \r\n//   // Pincode Else Node\r\n//   { id: '15', data: { label: 'Pincode Else' }, position: { x: 150, y: 800 } },\r\n \r\n//   // Update DB Node for Pincode Starts with '40'\r\n//   { id: '17', data: { label: 'Update DB: status = \\'loan_approval_required\\'' }, position: { x: -300, y: 900 } },\r\n \r\n//   // End Node for Pincode Starts with '40'\r\n//   { id: '18', data: { label: 'End' }, position: { x: -300, y: 1000 } },\r\n \r\n//   // Update DB Node for Pincode Else\r\n//   { id: '20', data: { label: 'Update DB: status = \\'loan_approved\\'' }, position: { x: 150, y: 900 } },\r\n \r\n//   // End Node for Pincode Else\r\n//   { id: '21', data: { label: 'End' }, position: { x: 150, y: 1000 } },\r\n \r\n// ];\r\n \r\n// // Define the edges\r\n// const edges = [\r\n//   { id: 'e1', source: '1', target: '2' },\r\n//   { id: 'e2', source: '2', target: '3' },\r\n//   { id: 'e3', source: '3', target: '4'},\r\n//   { id: 'e4', source: '3', target: '5'},\r\n//   { id: 'e5', source: '5', target: '6' },\r\n//   { id: 'e6', source: '6', target: '7' },\r\n//   { id: 'e7', source: '4', target: '8' },\r\n//   { id: 'e8', source: '8', target: '9' },\r\n//   { id: 'e9', source: '9', target: '10' },\r\n//   { id: 'e10', source: '9', target: '11'},\r\n//   { id: 'e19', source: '12', target: '22'  },// Connect Female to End Node\r\n//   { id: 'e11', source: '10', target: '13' }, // Male leads to Pincode Check Node\r\n//   { id: 'e12', source: '13', target: '14' },\r\n//   { id: 'e13', source: '13', target: '15' },\r\n//   { id: 'e14', source: '14', target: '17' }, // Pincode Starts with '40' leads to Update DB Node\r\n//   { id: 'e15', source: '17', target: '18' }, // Update DB Node for Pincode Starts with '40' leads to End\r\n \r\n//   { id: 'e16', source: '15', target: '20' }, // Pincode Else leads to Update DB Node\r\n//   { id: 'e17', source: '20', target: '21' }, // Update DB Node for Pincode Else leads to End\r\n \r\n//   { id: 'e18', source: '11', target: '12' },\r\n \r\n// ];\r\n \r\n// // Define the end node\r\n// const endNode = { id: '21', data: { label: 'End' }, position: { x: 150, y: 1000 } };\r\n \r\n// const ViewTree = () => (\r\n//   <div style={{ height: 1000 }}>\r\n//     <ReactFlow nodes={[...nodes, endNode]} edges={edges} fitView>\r\n//       <MiniMap />\r\n//       <Controls />\r\n//       <Background />\r\n//     </ReactFlow>\r\n//   </div>\r\n// );\r\n \r\n\r\n// export default ViewTree;\r\n\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState, useRef } from 'react';\r\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\n// import axios from 'axios';\r\n\r\n// const ViewTree = () => {\r\n//   const [nodes, setNodes] = useState([]);\r\n//   const [edges, setEdges] = useState([]);\r\n//   const reactFlowWrapper = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//       //   const response = {\r\n//       //     \"GenderCheck\": {\r\n//       //         \"PincodeCheck\": {\r\n//       //             \"key\": 0,\r\n//       //             \"value\": \"Male\"\r\n//       //         },\r\n//       //         \"LoanStatus\": {\r\n//       //             \"key\": 2,\r\n//       //             \"value\": \"Female\"\r\n//       //         }\r\n//       //     },\r\n//       //     \"PincodeCheck\": {\r\n//       //         \"LoanStatus\": {\r\n//       //             \"key\": 3,\r\n//       //             \"value\": \"Starts with 40\"\r\n//       //         }\r\n//       //     },\r\n//       //     \"DobCheck\": {\r\n//       //         \"GenderCheck\": {\r\n//       //             \"key\": 0,\r\n//       //             \"value\": \"age>25\"\r\n//       //         }\r\n//       //     }\r\n//       // };\r\n//       const response = {\r\n//         a: {\r\n//           b: {\r\n//             key: 0,\r\n//             value: \"B\",\r\n//           },\r\n//           c: {\r\n//             key: 0,\r\n//             value: \"C\",\r\n//           },\r\n//         },\r\n//         b: {\r\n//           d: {\r\n//             key: 0,\r\n//             value: \"D\",\r\n//           },\r\n//           e: {\r\n//             key: 0,\r\n//             value: \"E\",\r\n//           },\r\n//         },\r\n//         c: {\r\n//           f: {\r\n//             key: 0,\r\n//             value: \"F\",\r\n//           },\r\n//           g: {\r\n//             key: 0,\r\n//             value: \"G\",\r\n//           },\r\n//         },\r\n//         g: {\r\n//           h: {\r\n//             key: 0,\r\n//             value: \"H\",\r\n//           },\r\n//           i: {\r\n//             key: 0,\r\n//             value: \"I\",\r\n//           },\r\n//         },\r\n//       };\r\n       \r\n//         processGraphData(response);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   let ypos = 0, xpos = 1000, xchange = 50, flag = 1;\r\n\r\n//   const processGraphData = (data) => {\r\n//     const newNodes = [];\r\n//     const newEdges = [];\r\n//     const positions = {};\r\n\r\n//     // Function to calculate position\r\n//     const calculatePosition = (node) => {\r\n//       if (!positions[node]) {\r\n//         const curr = (flag*xchange);\r\n//         positions[node] = { x: xpos+curr, y: ypos };\r\n//         console.log(positions[node]);\r\n//         console.log(xpos, xchange);\r\n//         if(flag == 1) flag = -1;\r\n//         else flag = 1;\r\n//         ypos += 100;\r\n//         xchange += 50;\r\n//       }\r\n//       return positions[node];\r\n//     };\r\n\r\n\r\n//     const getEdgeColor = (key) => {\r\n//       switch (key) {\r\n//         case 0:\r\n//           return 'gray';\r\n//         case 1:\r\n//           return 'green';\r\n//         case 2:\r\n//           return 'yellow';\r\n//         case 3:\r\n//           return 'orange';\r\n//         default:\r\n//           return 'black';\r\n//       }\r\n//     };\r\n\r\n//     Object.keys(data).forEach((source) => {\r\n//       if (!newNodes.find((node) => node.id === source)) {\r\n//         newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n//       }\r\n//       Object.keys(data[source]).forEach((target) => {\r\n//         if (!newNodes.find((node) => node.id === target)) {\r\n//           newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n//         }\r\n//         const { key, value } = data[source][target];\r\n//         console.log(key);\r\n//         newEdges.push({\r\n//           id: `e${source}-${target}`,\r\n//           source,\r\n//           target,\r\n//           label: value,\r\n//           markerEnd: {\r\n//             type: 'arrow',\r\n//           },\r\n//           style: { stroke: getEdgeColor(key) }, // Coloring based on key\r\n//         });\r\n//       });\r\n//     });\r\n\r\n//     setNodes(newNodes);\r\n//     setEdges(newEdges);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ height: '100vh' }} ref={reactFlowWrapper}>\r\n//       <ReactFlow nodes={nodes} edges={edges} fitView>\r\n//         <MiniMap />\r\n//         <Controls />\r\n//         <Background />\r\n//       </ReactFlow>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewTree;\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport ReactFlow, { MiniMap, Controls, Background, ReactFlowProvider } from 'react-flow-renderer';\r\nimport axios from 'axios';\r\nimport CustomEdge from './CustomEdge';\r\n\r\n// Function to perform topological sorting and return a map with indices\r\nconst topologicalSortWithIndex = (graph) => {\r\n  const visited = new Set();\r\n  const stack = [];\r\n  const indexMap = new Map();\r\n  \r\n  const visit = (node) => {\r\n    if (visited.has(node)) return;\r\n    visited.add(node);\r\n    if (graph[node]) {\r\n      Object.keys(graph[node]).forEach((neighbor) => visit(neighbor));\r\n    }\r\n    stack.push(node);\r\n  };\r\n\r\n  Object.keys(graph).forEach(visit);\r\n  const sortedNodes = stack.reverse();\r\n  \r\n  // Build the index map\r\n  sortedNodes.forEach((node, index) => {\r\n    indexMap.set(node, index);\r\n  });\r\n\r\n  return indexMap;\r\n};\r\n\r\nconst edgeTypes = {\r\n  custom: CustomEdge,\r\n};\r\n\r\nconst ViewTree = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const reactFlowWrapper = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8080/api/graph-data');\r\n        const data = response.data;\r\n        processGraphData(data);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const processGraphData = (data) => {\r\n    const newNodes = [];\r\n    const newEdges = [];\r\n    const indexMap = topologicalSortWithIndex(data);\r\n    const positions = {};\r\n    let yOffset = 0;\r\n\r\n    // Function to calculate position based on index\r\n    const calculatePosition = (node) => {\r\n      if (!positions[node]) {\r\n        positions[node] = { x: 250, y: yOffset + indexMap.get(node) * 100 };\r\n      }\r\n      return positions[node];\r\n    };\r\n\r\n    // Function to determine the edge color based on the key value\r\n    const getEdgeColor = (key) => {\r\n      switch (key) {\r\n        case 0:\r\n          return 'gray';\r\n        case 1:\r\n          return 'green';\r\n        case 2:\r\n          return 'yellow';\r\n        case 3:\r\n          return 'orange';\r\n        default:\r\n          return 'black';\r\n      }\r\n    };\r\n\r\n    Object.keys(data).forEach((source) => {\r\n      if (!newNodes.find((node) => node.id === source)) {\r\n        newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n      }\r\n      if (data[source]) {\r\n        Object.keys(data[source]).forEach((target) => {\r\n          if (!newNodes.find((node) => node.id === target)) {\r\n            newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n          }\r\n          const { key, value } = data[source][target];\r\n          newEdges.push({\r\n            id: `e${source}-${target}`,\r\n            source,\r\n            target,\r\n            type: 'custom',\r\n            data: { label: value },\r\n            style: { stroke: getEdgeColor(key) },\r\n            markerEnd: {\r\n              type: 'arrowclosed',\r\n            },\r\n          });\r\n        });\r\n      }\r\n    });\r\n\r\n    setNodes(newNodes);\r\n    setEdges(newEdges);\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: '100vh' }} ref={reactFlowWrapper}>\r\n      <ReactFlowProvider>\r\n        <ReactFlow nodes={nodes} edges={edges} edgeTypes={edgeTypes} fitView>\r\n          <MiniMap />\r\n          <Controls />\r\n          <Background />\r\n        </ReactFlow>\r\n      </ReactFlowProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewTree;\r\n"],"mappings":";;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAaA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAMA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,SAAS,IAAIC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,iBAAiB,QAAQ,qBAAqB;AACjG,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,cAAc;;AAErC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,wBAAwB,GAAIC,KAAK,IAAK;EAC1C,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC;EAE1B,MAAMC,KAAK,GAAIC,IAAI,IAAK;IACtB,IAAIN,OAAO,CAACO,GAAG,CAACD,IAAI,CAAC,EAAE;IACvBN,OAAO,CAACQ,GAAG,CAACF,IAAI,CAAC;IACjB,IAAIP,KAAK,CAACO,IAAI,CAAC,EAAE;MACfG,MAAM,CAACC,IAAI,CAACX,KAAK,CAACO,IAAI,CAAC,CAAC,CAACK,OAAO,CAAEC,QAAQ,IAAKP,KAAK,CAACO,QAAQ,CAAC,CAAC;IACjE;IACAV,KAAK,CAACW,IAAI,CAACP,IAAI,CAAC;EAClB,CAAC;EAEDG,MAAM,CAACC,IAAI,CAACX,KAAK,CAAC,CAACY,OAAO,CAACN,KAAK,CAAC;EACjC,MAAMS,WAAW,GAAGZ,KAAK,CAACa,OAAO,CAAC,CAAC;;EAEnC;EACAD,WAAW,CAACH,OAAO,CAAC,CAACL,IAAI,EAAEU,KAAK,KAAK;IACnCb,QAAQ,CAACc,GAAG,CAACX,IAAI,EAAEU,KAAK,CAAC;EAC3B,CAAC,CAAC;EAEF,OAAOb,QAAQ;AACjB,CAAC;AAED,MAAMe,SAAS,GAAG;EAChBC,MAAM,EAAExB;AACV,CAAC;AAED,MAAMyB,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGpC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACqC,KAAK,EAAEC,QAAQ,CAAC,GAAGtC,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMuC,gBAAgB,GAAGtC,MAAM,CAAC,IAAI,CAAC;EAErCF,SAAS,CAAC,MAAM;IACd,MAAMyC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMlC,KAAK,CAACmC,GAAG,CAAC,sCAAsC,CAAC;QACxE,MAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAI;QAC1BC,gBAAgB,CAACD,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IAEDL,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,gBAAgB,GAAID,IAAI,IAAK;IACjC,MAAMI,QAAQ,GAAG,EAAE;IACnB,MAAMC,QAAQ,GAAG,EAAE;IACnB,MAAMhC,QAAQ,GAAGL,wBAAwB,CAACgC,IAAI,CAAC;IAC/C,MAAMM,SAAS,GAAG,CAAC,CAAC;IACpB,IAAIC,OAAO,GAAG,CAAC;;IAEf;IACA,MAAMC,iBAAiB,GAAIhC,IAAI,IAAK;MAClC,IAAI,CAAC8B,SAAS,CAAC9B,IAAI,CAAC,EAAE;QACpB8B,SAAS,CAAC9B,IAAI,CAAC,GAAG;UAAEiC,CAAC,EAAE,GAAG;UAAEC,CAAC,EAAEH,OAAO,GAAGlC,QAAQ,CAAC0B,GAAG,CAACvB,IAAI,CAAC,GAAG;QAAI,CAAC;MACrE;MACA,OAAO8B,SAAS,CAAC9B,IAAI,CAAC;IACxB,CAAC;;IAED;IACA,MAAMmC,YAAY,GAAIC,GAAG,IAAK;MAC5B,QAAQA,GAAG;QACT,KAAK,CAAC;UACJ,OAAO,MAAM;QACf,KAAK,CAAC;UACJ,OAAO,OAAO;QAChB,KAAK,CAAC;UACJ,OAAO,QAAQ;QACjB,KAAK,CAAC;UACJ,OAAO,QAAQ;QACjB;UACE,OAAO,OAAO;MAClB;IACF,CAAC;IAEDjC,MAAM,CAACC,IAAI,CAACoB,IAAI,CAAC,CAACnB,OAAO,CAAEgC,MAAM,IAAK;MACpC,IAAI,CAACT,QAAQ,CAACU,IAAI,CAAEtC,IAAI,IAAKA,IAAI,CAACuC,EAAE,KAAKF,MAAM,CAAC,EAAE;QAChDT,QAAQ,CAACrB,IAAI,CAAC;UAAEgC,EAAE,EAAEF,MAAM;UAAEb,IAAI,EAAE;YAAEgB,KAAK,EAAEH;UAAO,CAAC;UAAEI,QAAQ,EAAET,iBAAiB,CAACK,MAAM;QAAE,CAAC,CAAC;MAC7F;MACA,IAAIb,IAAI,CAACa,MAAM,CAAC,EAAE;QAChBlC,MAAM,CAACC,IAAI,CAACoB,IAAI,CAACa,MAAM,CAAC,CAAC,CAAChC,OAAO,CAAEqC,MAAM,IAAK;UAC5C,IAAI,CAACd,QAAQ,CAACU,IAAI,CAAEtC,IAAI,IAAKA,IAAI,CAACuC,EAAE,KAAKG,MAAM,CAAC,EAAE;YAChDd,QAAQ,CAACrB,IAAI,CAAC;cAAEgC,EAAE,EAAEG,MAAM;cAAElB,IAAI,EAAE;gBAAEgB,KAAK,EAAEE;cAAO,CAAC;cAAED,QAAQ,EAAET,iBAAiB,CAACU,MAAM;YAAE,CAAC,CAAC;UAC7F;UACA,MAAM;YAAEN,GAAG;YAAEO;UAAM,CAAC,GAAGnB,IAAI,CAACa,MAAM,CAAC,CAACK,MAAM,CAAC;UAC3Cb,QAAQ,CAACtB,IAAI,CAAC;YACZgC,EAAE,EAAE,IAAIF,MAAM,IAAIK,MAAM,EAAE;YAC1BL,MAAM;YACNK,MAAM;YACNE,IAAI,EAAE,QAAQ;YACdpB,IAAI,EAAE;cAAEgB,KAAK,EAAEG;YAAM,CAAC;YACtBE,KAAK,EAAE;cAAEC,MAAM,EAAEX,YAAY,CAACC,GAAG;YAAE,CAAC;YACpCW,SAAS,EAAE;cACTH,IAAI,EAAE;YACR;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IAEF3B,QAAQ,CAACW,QAAQ,CAAC;IAClBT,QAAQ,CAACU,QAAQ,CAAC;EACpB,CAAC;EAED,oBACEtC,OAAA;IAAKsD,KAAK,EAAE;MAAEG,MAAM,EAAE;IAAQ,CAAE;IAACC,GAAG,EAAE7B,gBAAiB;IAAA8B,QAAA,eACrD3D,OAAA,CAACJ,iBAAiB;MAAA+D,QAAA,eAChB3D,OAAA,CAACR,SAAS;QAACiC,KAAK,EAAEA,KAAM;QAACE,KAAK,EAAEA,KAAM;QAACN,SAAS,EAAEA,SAAU;QAACuC,OAAO;QAAAD,QAAA,gBAClE3D,OAAA,CAACP,OAAO;UAAAoE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACXhE,OAAA,CAACN,QAAQ;UAAAmE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACZhE,OAAA,CAACL,UAAU;UAAAkE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjB,CAAC;AAEV,CAAC;AAACxC,EAAA,CA1FID,QAAQ;AAAA0C,EAAA,GAAR1C,QAAQ;AA4Fd,eAAeA,QAAQ;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}