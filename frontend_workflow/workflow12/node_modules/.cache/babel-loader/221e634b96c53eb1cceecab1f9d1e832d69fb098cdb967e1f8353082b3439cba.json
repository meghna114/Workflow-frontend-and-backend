{"ast":null,"code":"var _jsxFileName = \"/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx\",\n  _s = $RefreshSig$();\n// // src/components/ViewTree.jsx\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import ReactFlow, { ReactFlowProvider, addEdge, Background, Controls, MiniMap } from 'reactflow';\n// import 'reactflow/dist/style.css';\n// import './ViewTree.css';\n\n// const ViewTree = ({ match }) => {\n//   const [elements, setElements] = useState([]);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     const fetchWorkflowJsonData = async () => {\n//       try {\n//         const response = await axios.get(`/api/get-workflow-json/${match.params.workflowId}`);\n//         generateElements(response.data.workflow, response.data.jsonData);\n//       } catch (error) {\n//         setError('Error fetching workflow and JSON data.');\n//       }\n//     };\n//     fetchWorkflowJsonData();\n//   }, [match.params.workflowId]);\n\n//   const generateElements = (workflow, jsonData) => {\n//     const newElements = [];\n//     const generateElement = (node, parentId = null) => {\n//       const nodeId = `${parentId ? `${parentId}-` : ''}${newElements.length}`;\n//       const isSatisfied = jsonData[node.name] !== undefined; // Check if the JSON data satisfies the node\n//       newElements.push({\n//         id: nodeId,\n//         data: { label: node.name || 'Unnamed Node' },\n//         position: { x: Math.random() * 250, y: Math.random() * 250 },\n//         style: { backgroundColor: isSatisfied ? 'green' : 'grey' }, // Set color based on satisfaction\n//       });\n//       if (parentId) {\n//         newElements.push({\n//           id: `e${parentId}-${nodeId}`,\n//           source: parentId,\n//           target: nodeId,\n//         });\n//       }\n//       if (node.children) {\n//         node.children.forEach((child) => generateElement(child, nodeId));\n//       }\n//     };\n//     generateElement(workflow);\n//     setElements(newElements);\n//   };\n\n//   return (\n//     <div className=\"view-tree-container\">\n//       <h1>Workflow Tree</h1>\n//       {error && <div className=\"error-message\">{error}</div>}\n//       <div className=\"react-flow-wrapper\" style={{ height: '80vh', width: '100%' }}>\n//         <ReactFlowProvider>\n//           <ReactFlow\n//             elements={elements}\n//             style={{ width: '100%', height: '100%' }}\n//             snapToGrid={true}\n//             snapGrid={[15, 15]}\n//             onConnect={(params) => setElements((els) => addEdge(params, els))}\n//           >\n//             <Background color=\"#aaa\" gap={16} />\n//             <Controls />\n//             <MiniMap nodeColor={(node) => {\n//               switch (node.type) {\n//                 case 'input':\n//                   return 'blue';\n//                 case 'output':\n//                   return 'green';\n//                 default:\n//                   return '#00ff00';\n//               }\n//             }} />\n//           </ReactFlow>\n//         </ReactFlowProvider>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ViewTree;\n\nimport React, { useEffect, useState } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConditionalWorkflowChart = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // const response = await axios.get('http://localhost:8080/api/graph-data');\n        const response = {\n          \"GenderCheck\": {\n            \"PincodeCheck\": {\n              \"key\": 0,\n              \"value\": \"Male\"\n            },\n            \"LoanStatus\": {\n              \"key\": 2,\n              \"value\": \"Female\"\n            }\n          },\n          \"PincodeCheck\": {\n            \"LoanStatus\": {\n              \"key\": 3,\n              \"value\": \"Starts with 40\"\n            }\n          },\n          \"DobCheck\": {\n            \"GenderCheck\": {\n              \"key\": 0,\n              \"value\": \"age>25\"\n            }\n          }\n        };\n        processGraphData(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const processGraphData = data => {\n    const newNodes = [];\n    const newEdges = [];\n    const positions = {};\n    let yOffset = 0;\n\n    // Function to calculate position\n    const calculatePosition = node => {\n      if (!positions[node]) {\n        positions[node] = {\n          x: 250,\n          y: yOffset\n        };\n        yOffset += 100;\n      }\n      return positions[node];\n    };\n    Object.keys(data).forEach(source => {\n      if (!newNodes.find(node => node.id === source)) {\n        newNodes.push({\n          id: source,\n          data: {\n            label: source\n          },\n          position: calculatePosition(source)\n        });\n      }\n      Object.keys(data[source]).forEach(target => {\n        if (!newNodes.find(node => node.id === target)) {\n          newNodes.push({\n            id: target,\n            data: {\n              label: target\n            },\n            position: calculatePosition(target)\n          });\n        }\n        const {\n          key,\n          value\n        } = data[source][target];\n        newEdges.push({\n          id: `e${source}-${target}`,\n          source,\n          target,\n          label: value,\n          style: {\n            stroke: `hsl(${key * 36}, 100%, 50%)`\n          } // Coloring based on key\n        });\n      });\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 1000\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(ConditionalWorkflowChart, \"qOdGaiImnCja3mNU5uxxCrNYw9I=\");\n_c = ConditionalWorkflowChart;\nexport default ConditionalWorkflowChart;\nvar _c;\n$RefreshReg$(_c, \"ConditionalWorkflowChart\");","map":{"version":3,"names":["React","useEffect","useState","ReactFlow","MiniMap","Controls","Background","axios","jsxDEV","_jsxDEV","ConditionalWorkflowChart","_s","nodes","setNodes","edges","setEdges","fetchData","response","processGraphData","data","error","console","newNodes","newEdges","positions","yOffset","calculatePosition","node","x","y","Object","keys","forEach","source","find","id","push","label","position","target","key","value","style","stroke","height","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx"],"sourcesContent":["// // src/components/ViewTree.jsx\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import ReactFlow, { ReactFlowProvider, addEdge, Background, Controls, MiniMap } from 'reactflow';\r\n// import 'reactflow/dist/style.css';\r\n// import './ViewTree.css';\r\n\r\n// const ViewTree = ({ match }) => {\r\n//   const [elements, setElements] = useState([]);\r\n//   const [error, setError] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     const fetchWorkflowJsonData = async () => {\r\n//       try {\r\n//         const response = await axios.get(`/api/get-workflow-json/${match.params.workflowId}`);\r\n//         generateElements(response.data.workflow, response.data.jsonData);\r\n//       } catch (error) {\r\n//         setError('Error fetching workflow and JSON data.');\r\n//       }\r\n//     };\r\n//     fetchWorkflowJsonData();\r\n//   }, [match.params.workflowId]);\r\n\r\n//   const generateElements = (workflow, jsonData) => {\r\n//     const newElements = [];\r\n//     const generateElement = (node, parentId = null) => {\r\n//       const nodeId = `${parentId ? `${parentId}-` : ''}${newElements.length}`;\r\n//       const isSatisfied = jsonData[node.name] !== undefined; // Check if the JSON data satisfies the node\r\n//       newElements.push({\r\n//         id: nodeId,\r\n//         data: { label: node.name || 'Unnamed Node' },\r\n//         position: { x: Math.random() * 250, y: Math.random() * 250 },\r\n//         style: { backgroundColor: isSatisfied ? 'green' : 'grey' }, // Set color based on satisfaction\r\n//       });\r\n//       if (parentId) {\r\n//         newElements.push({\r\n//           id: `e${parentId}-${nodeId}`,\r\n//           source: parentId,\r\n//           target: nodeId,\r\n//         });\r\n//       }\r\n//       if (node.children) {\r\n//         node.children.forEach((child) => generateElement(child, nodeId));\r\n//       }\r\n//     };\r\n//     generateElement(workflow);\r\n//     setElements(newElements);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"view-tree-container\">\r\n//       <h1>Workflow Tree</h1>\r\n//       {error && <div className=\"error-message\">{error}</div>}\r\n//       <div className=\"react-flow-wrapper\" style={{ height: '80vh', width: '100%' }}>\r\n//         <ReactFlowProvider>\r\n//           <ReactFlow\r\n//             elements={elements}\r\n//             style={{ width: '100%', height: '100%' }}\r\n//             snapToGrid={true}\r\n//             snapGrid={[15, 15]}\r\n//             onConnect={(params) => setElements((els) => addEdge(params, els))}\r\n//           >\r\n//             <Background color=\"#aaa\" gap={16} />\r\n//             <Controls />\r\n//             <MiniMap nodeColor={(node) => {\r\n//               switch (node.type) {\r\n//                 case 'input':\r\n//                   return 'blue';\r\n//                 case 'output':\r\n//                   return 'green';\r\n//                 default:\r\n//                   return '#00ff00';\r\n//               }\r\n//             }} />\r\n//           </ReactFlow>\r\n//         </ReactFlowProvider>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewTree;\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\nimport axios from 'axios';\r\n\r\nconst ConditionalWorkflowChart = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // const response = await axios.get('http://localhost:8080/api/graph-data');\r\n        const response = {\r\n          \"GenderCheck\": {\r\n              \"PincodeCheck\": {\r\n                  \"key\": 0,\r\n                  \"value\": \"Male\"\r\n              },\r\n              \"LoanStatus\": {\r\n                  \"key\": 2,\r\n                  \"value\": \"Female\"\r\n              }\r\n          },\r\n          \"PincodeCheck\": {\r\n              \"LoanStatus\": {\r\n                  \"key\": 3,\r\n                  \"value\": \"Starts with 40\"\r\n              }\r\n          },\r\n          \"DobCheck\": {\r\n              \"GenderCheck\": {\r\n                  \"key\": 0,\r\n                  \"value\": \"age>25\"\r\n              }\r\n          }\r\n      };\r\n        processGraphData(data);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const processGraphData = (data) => {\r\n    const newNodes = [];\r\n    const newEdges = [];\r\n    const positions = {};\r\n    let yOffset = 0;\r\n\r\n    // Function to calculate position\r\n    const calculatePosition = (node) => {\r\n      if (!positions[node]) {\r\n        positions[node] = { x: 250, y: yOffset };\r\n        yOffset += 100;\r\n      }\r\n      return positions[node];\r\n    };\r\n\r\n    Object.keys(data).forEach((source) => {\r\n      if (!newNodes.find((node) => node.id === source)) {\r\n        newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n      }\r\n      Object.keys(data[source]).forEach((target) => {\r\n        if (!newNodes.find((node) => node.id === target)) {\r\n          newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n        }\r\n        const { key, value } = data[source][target];\r\n        newEdges.push({\r\n          id: `e${source}-${target}`,\r\n          source,\r\n          target,\r\n          label: value,\r\n          style: { stroke: `hsl(${key * 36}, 100%, 50%)` }, // Coloring based on key\r\n        });\r\n      });\r\n    });\r\n\r\n    setNodes(newNodes);\r\n    setEdges(newEdges);\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: 1000 }}>\r\n      <ReactFlow nodes={nodes} edges={edges} fitView>\r\n        <MiniMap />\r\n        <Controls />\r\n        <Background />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConditionalWorkflowChart;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}