{"ast":null,"code":"var _jsxFileName = \"/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport CustomEdge from './CustomEdge';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewTree = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const reactFlowWrapper = useRef(null);\n  const location = useLocation();\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const dataParam = queryParams.get('data');\n    if (dataParam) {\n      try {\n        // Decoding and parsing the graph data\n        const graphData = JSON.parse(decodeURIComponent(dataParam));\n        console.log(graphData.data);\n        // const newresp = updateSubtreeValues(graphData);\n        // console.log(newresp.data);\n        // processGraphData(newresp.data);\n        processGraphData(graphData.data);\n      } catch (error) {\n        console.error('Error parsing graph data:', error);\n      }\n    }\n  }, [location]);\n\n  // Function to perform topological sorting and return a map with indices\n  const topologicalSortWithIndex = graph => {\n    const visited = new Set();\n    const stack = [];\n    const indexMap = new Map();\n    const visit = node => {\n      if (visited.has(node)) return;\n      visited.add(node);\n      if (graph[node]) {\n        Object.keys(graph[node]).forEach(neighbor => visit(neighbor));\n      }\n      stack.push(node);\n    };\n    Object.keys(graph).forEach(visit);\n    const sortedNodes = stack.reverse();\n\n    // Building the index map\n    sortedNodes.forEach((node, index) => {\n      indexMap.set(node, index);\n    });\n    return indexMap;\n  };\n  const updateSubtreeValue = (graph, nodex) => {\n    const result = JSON.parse(JSON.stringify(graph));\n    // let flag = 1;\n    const updateSubtreeRecursive = (node, value) => {\n      console.log(node, value);\n      Object.keys(result[node]).forEach(target => {\n        console.log(node, target);\n        if (value == 0) result[node][target].key = 0;\n        if (result[node][target].key == 0) {\n          console.log(target);\n          updateSubtreeRecursive(target, 0);\n        } else {\n          console.log(target);\n          updateSubtreeValue(target, result[node][target].key);\n        }\n      });\n    };\n    // updateSubtreeRecursive(node, flag);\n    updateSubtreeRecursive(nodex, 1);\n  };\n\n  // const updateSubtreeValues = (graph) => {\n  //   const result = JSON.parse(JSON.stringify(graph)); // Deep copy to avoid mutating the original graph\n\n  //   const updateSubtree = (node) => {\n  //     if (!result[node]) return;\n  //     console.log(node);\n  //     // If the node has a number value of 0, update its subtree\n  //     Object.keys(result[node]).forEach((target) => {\n  //       const { key } = result[node][target];\n  //       if (key === 0) {\n  //         // Update the current node and all nodes in the subtree\n  //         updateSubtreeRecursive(target);\n  //       }\n  //     });\n  //   };\n\n  //   const updateSubtreeRecursive = (node) => {\n  //     if (!result[node]) return;\n  //     // Set the number value of the current node to 0\n  //     Object.keys(result[node]).forEach((target) => {\n  //       result[node][target].key = 0;\n  //       updateSubtreeRecursive(target);\n  //     });\n  //   };\n  //   console.log(result);\n  //   Object.keys(result).forEach(updateSubtree);\n  //   console.log(result);\n  //   return result;\n  // };\n\n  let ypos = 0,\n    xpos = 1000,\n    xchange = 50,\n    flag = 1;\n  function findFirstOccurrence(map, value) {\n    let foundKey = undefined;\n    map.forEach((val, key) => {\n      if (foundKey === undefined && val === value) {\n        foundKey = key;\n      }\n    });\n    return foundKey;\n  }\n  const processGraphData = data1 => {\n    const newNodes = [];\n    const newEdges = [];\n    const positions = {};\n    const indexMap = topologicalSortWithIndex(data1);\n    const firstoccactivity = findFirstOccurrence(indexMap, 0);\n    console.log(firstoccactivity);\n    const data = updateSubtreeValue(data1, firstoccactivity);\n    console.log(indexMap);\n\n    // Function to calculate position\n    const calculatePosition = node => {\n      if (!positions[node]) {\n        const curr = flag * xchange;\n        positions[node] = {\n          x: xpos + curr,\n          y: 100 * indexMap.get(node)\n        };\n        console.log(positions[node]);\n        console.log(xpos, xchange);\n        if (flag == 1) flag = -1;else flag = 1;\n        ypos += 100;\n        xchange += 50;\n      }\n      return positions[node];\n    };\n    const getEdgeColor = key => {\n      switch (key) {\n        case 0:\n          return 'gray';\n        case 1:\n          return 'green';\n        case 2:\n          return 'yellow';\n        case 3:\n          return 'orange';\n        default:\n          return 'black';\n      }\n    };\n    Object.keys(data).forEach(source => {\n      if (!newNodes.find(node => node.id === source)) {\n        newNodes.push({\n          id: source,\n          data: {\n            label: source\n          },\n          position: calculatePosition(source)\n        });\n      }\n      Object.keys(data[source]).forEach(target => {\n        if (!newNodes.find(node => node.id === target)) {\n          newNodes.push({\n            id: target,\n            data: {\n              label: target\n            },\n            position: calculatePosition(target)\n          });\n        }\n        const {\n          key,\n          value\n        } = data[source][target];\n        console.log(key);\n        newEdges.push({\n          id: `e${source}-${target}`,\n          source,\n          target,\n          type: CustomEdge,\n          label: value,\n          markerEnd: {\n            type: 'arrow'\n          },\n          style: {\n            stroke: getEdgeColor(key)\n          } // Coloring based on key\n        });\n      });\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    ref: reactFlowWrapper,\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewTree, \"ntMxZXLjuew7Kh9E01wvbC30yAs=\", false, function () {\n  return [useLocation];\n});\n_c = ViewTree;\nexport default ViewTree;\nvar _c;\n$RefreshReg$(_c, \"ViewTree\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ReactFlow","MiniMap","Controls","Background","useLocation","axios","CustomEdge","jsxDEV","_jsxDEV","ViewTree","_s","nodes","setNodes","edges","setEdges","reactFlowWrapper","location","queryParams","URLSearchParams","search","dataParam","get","graphData","JSON","parse","decodeURIComponent","console","log","data","processGraphData","error","topologicalSortWithIndex","graph","visited","Set","stack","indexMap","Map","visit","node","has","add","Object","keys","forEach","neighbor","push","sortedNodes","reverse","index","set","updateSubtreeValue","nodex","result","stringify","updateSubtreeRecursive","value","target","key","ypos","xpos","xchange","flag","findFirstOccurrence","map","foundKey","undefined","val","data1","newNodes","newEdges","positions","firstoccactivity","calculatePosition","curr","x","y","getEdgeColor","source","find","id","label","position","type","markerEnd","style","stroke","height","ref","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport CustomEdge from './CustomEdge'\r\nconst ViewTree = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const reactFlowWrapper = useRef(null);\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const dataParam = queryParams.get('data');\r\n    if (dataParam) {\r\n      try {\r\n        // Decoding and parsing the graph data\r\n        const graphData = JSON.parse(decodeURIComponent(dataParam));\r\n        console.log(graphData.data);\r\n        // const newresp = updateSubtreeValues(graphData);\r\n        // console.log(newresp.data);\r\n        // processGraphData(newresp.data);\r\n        processGraphData(graphData.data);\r\n      } catch (error) {\r\n        console.error('Error parsing graph data:', error);\r\n      }\r\n    }\r\n  }, [location]);\r\n\r\n\r\n  // Function to perform topological sorting and return a map with indices\r\n  const topologicalSortWithIndex = (graph) => {\r\n    const visited = new Set();\r\n    const stack = [];\r\n    const indexMap = new Map();\r\n    \r\n    const visit = (node) => {\r\n      if (visited.has(node)) return;\r\n      visited.add(node);\r\n      if (graph[node]) {\r\n        Object.keys(graph[node]).forEach((neighbor) => visit(neighbor));\r\n      }\r\n      stack.push(node);\r\n    };\r\n\r\n    Object.keys(graph).forEach(visit);\r\n    const sortedNodes = stack.reverse();\r\n    \r\n    // Building the index map\r\n    sortedNodes.forEach((node, index) => {\r\n      indexMap.set(node, index);\r\n    });\r\n\r\n    return indexMap;\r\n  };\r\n\r\n\r\n  const updateSubtreeValue = (graph, nodex) => {\r\n    const result = JSON.parse(JSON.stringify(graph));\r\n    // let flag = 1;\r\n    const updateSubtreeRecursive = (node, value) => {\r\n      console.log(node, value)\r\n      Object.keys(result[node]).forEach((target) => {\r\n        console.log(node, target)\r\n        if(value==0) result[node][target].key = 0;\r\n        if(result[node][target].key==0){\r\n          console.log(target)\r\n          updateSubtreeRecursive(target, 0);\r\n        }else{\r\n          console.log(target)\r\n          updateSubtreeValue(target, result[node][target].key);\r\n        }\r\n      })\r\n    }\r\n    // updateSubtreeRecursive(node, flag);\r\n    updateSubtreeRecursive(nodex, 1);\r\n  }\r\n\r\n\r\n  // const updateSubtreeValues = (graph) => {\r\n  //   const result = JSON.parse(JSON.stringify(graph)); // Deep copy to avoid mutating the original graph\r\n  \r\n  //   const updateSubtree = (node) => {\r\n  //     if (!result[node]) return;\r\n  //     console.log(node);\r\n  //     // If the node has a number value of 0, update its subtree\r\n  //     Object.keys(result[node]).forEach((target) => {\r\n  //       const { key } = result[node][target];\r\n  //       if (key === 0) {\r\n  //         // Update the current node and all nodes in the subtree\r\n  //         updateSubtreeRecursive(target);\r\n  //       }\r\n  //     });\r\n  //   };\r\n  \r\n  //   const updateSubtreeRecursive = (node) => {\r\n  //     if (!result[node]) return;\r\n  //     // Set the number value of the current node to 0\r\n  //     Object.keys(result[node]).forEach((target) => {\r\n  //       result[node][target].key = 0;\r\n  //       updateSubtreeRecursive(target);\r\n  //     });\r\n  //   };\r\n  //   console.log(result);\r\n  //   Object.keys(result).forEach(updateSubtree);\r\n  //   console.log(result);\r\n  //   return result;\r\n  // };\r\n  \r\n\r\n\r\n\r\n  let ypos = 0, xpos = 1000, xchange = 50, flag = 1;\r\n\r\n  function findFirstOccurrence(map, value) {\r\n    let foundKey = undefined;\r\n  \r\n    map.forEach((val, key) => {\r\n      if (foundKey === undefined && val === value) {\r\n        foundKey = key;\r\n      }\r\n    });\r\n  \r\n    return foundKey;\r\n  }\r\n\r\n  const processGraphData = (data1) => {\r\n    const newNodes = [];\r\n    const newEdges = [];\r\n    const positions = {};\r\n    const indexMap = topologicalSortWithIndex(data1);\r\n    const firstoccactivity = findFirstOccurrence(indexMap, 0);\r\n    console.log(firstoccactivity)\r\n    const data = updateSubtreeValue(data1, firstoccactivity);\r\n    console.log(indexMap);\r\n\r\n    // Function to calculate position\r\n    const calculatePosition = (node) => {\r\n      if (!positions[node]) {\r\n        const curr = (flag*xchange);\r\n        positions[node] = { x: xpos+curr, y: 100*indexMap.get(node) };\r\n        console.log(positions[node]);\r\n        console.log(xpos, xchange);\r\n        if(flag == 1) flag = -1;\r\n        else flag = 1;\r\n        ypos += 100;\r\n        xchange += 50;\r\n      }\r\n      return positions[node];\r\n    };\r\n\r\n\r\n    const getEdgeColor = (key) => {\r\n      switch (key) {\r\n        case 0:\r\n          return 'gray';\r\n        case 1:\r\n          return 'green';\r\n        case 2:\r\n          return 'yellow';\r\n        case 3:\r\n          return 'orange';\r\n        default:\r\n          return 'black';\r\n      }\r\n    };\r\n\r\n    Object.keys(data).forEach((source) => {\r\n      if (!newNodes.find((node) => node.id === source)) {\r\n        newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n      }\r\n      Object.keys(data[source]).forEach((target) => {\r\n        if (!newNodes.find((node) => node.id === target)) {\r\n          newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n        }\r\n        const { key, value } = data[source][target];\r\n        console.log(key);\r\n        newEdges.push({\r\n          id: `e${source}-${target}`,\r\n          source,\r\n          target,\r\n          type: CustomEdge,\r\n          label: value,\r\n          markerEnd: {\r\n            type: 'arrow',\r\n          },\r\n          style: { stroke: getEdgeColor(key) }, // Coloring based on key\r\n        });\r\n      });\r\n    });\r\n\r\n    setNodes(newNodes);\r\n    setEdges(newEdges);\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: '100vh' }} ref={reactFlowWrapper}>\r\n      <ReactFlow nodes={nodes} edges={edges} fitView>\r\n        <MiniMap />\r\n        <Controls />\r\n        <Background />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewTree;\r\n\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}