{"ast":null,"code":"var _jsxFileName = \"/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\nimport { useLocation } from 'react-router-dom';\nimport axios from 'axios';\nimport CustomEdge from './CustomEdge';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewTree = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const reactFlowWrapper = useRef(null);\n  const location = useLocation();\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const dataParam = queryParams.get('data');\n    if (dataParam) {\n      try {\n        // Decoding and parsing the graph data\n        const graphData = JSON.parse(decodeURIComponent(dataParam));\n        console.log(graphData);\n        const newresp = updateSubtreeValues(graphData);\n        console.log(newresp.data);\n        processGraphData(newresp.data);\n      } catch (error) {\n        console.error('Error parsing graph data:', error);\n      }\n    }\n  }, [location]);\n\n  // Function to perform topological sorting and return a map with indices\n  const topologicalSortWithIndex = graph => {\n    const visited = new Set();\n    const stack = [];\n    const indexMap = new Map();\n    const visit = node => {\n      if (visited.has(node)) return;\n      visited.add(node);\n      if (graph[node]) {\n        Object.keys(graph[node]).forEach(neighbor => visit(neighbor));\n      }\n      stack.push(node);\n    };\n    Object.keys(graph).forEach(visit);\n    const sortedNodes = stack.reverse();\n\n    // Building the index map\n    sortedNodes.forEach((node, index) => {\n      indexMap.set(node, index);\n    });\n    return indexMap;\n  };\n  const updateSubtreeValue = graph => {\n    const result = JSON.parse(JSON.stringify(graph));\n    let flag = 1;\n    updateSubtreeRecursive = (node, value) => {\n      graph.forEach(target => {\n        if (value == 0) result[node][target];\n        if (result[node][target] == 0) {}\n      });\n    };\n  };\n  const updateSubtreeValues = graph => {\n    const result = JSON.parse(JSON.stringify(graph)); // Deep copy to avoid mutating the original graph\n\n    const updateSubtree = node => {\n      if (!result[node]) return;\n      console.log(node);\n      // If the node has a number value of 0, update its subtree\n      Object.keys(result[node]).forEach(target => {\n        const {\n          key\n        } = result[node][target];\n        if (key === 0) {\n          // Update the current node and all nodes in the subtree\n          updateSubtreeRecursive(target);\n        }\n      });\n    };\n    const updateSubtreeRecursive = node => {\n      if (!result[node]) return;\n      // Set the number value of the current node to 0\n      Object.keys(result[node]).forEach(target => {\n        result[node][target].key = 0;\n        updateSubtreeRecursive(target);\n      });\n    };\n    console.log(result);\n    Object.keys(result).forEach(updateSubtree);\n    console.log(result);\n    return result;\n  };\n\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     try {\n  //   const response = {\n  //     \"GenderCheck\": {\n  //         \"PincodeCheck\": {\n  //             \"key\": 0,\n  //             \"value\": \"Male\"\n  //         },\n  //         \"LoanStatus\": {\n  //             \"key\": 2,\n  //             \"value\": \"Female\"\n  //         }\n  //     },\n  //     \"PincodeCheck\": {\n  //         \"LoanStatus\": {\n  //             \"key\": 3,\n  //             \"value\": \"Starts with 40\"\n  //         }\n  //     },\n  //     \"DobCheck\": {\n  //         \"GenderCheck\": {\n  //             \"key\": 0,\n  //             \"value\": \"age>25\"\n  //         }\n  //     }\n  // };\n  //     const response = {\n  //       a: {\n  //         b: {\n  //           key: 1,\n  //           value: \"B\",\n  //         },\n  //         c: {\n  //           key: 1,\n  //           value: \"C\",\n  //         },\n  //       },\n  //       b: {\n  //         d: {\n  //           key: 0,\n  //           value: \"D\",\n  //         },\n  //         e: {\n  //           key: 0,\n  //           value: \"E\",\n  //         },\n  //       },\n  //       c: {\n  //         f: {\n  //           key: 0,\n  //           value: \"F\",\n  //         },\n  //         g: {\n  //           key: 1,\n  //           value: \"G\",\n  //         },\n  //       },\n  //       g: {\n  //         h: {\n  //           key: 2,\n  //           value: \"H\",\n  //         },\n  //         i: {\n  //           key: 0,\n  //           value: \"I\",\n  //         },\n  //       },\n  //       i: {\n  //         e: {\n  //           key: 3,\n  //           value: \"random\"\n  //         }\n  //       }\n  //     };\n\n  //     } catch (error) {\n  //       console.error('Error fetching data:', error);\n  //     }\n  //   };\n\n  //   fetchData();\n  // }, []);\n\n  let ypos = 0,\n    xpos = 1000,\n    xchange = 50,\n    flag = 1;\n  const processGraphData = data => {\n    const newNodes = [];\n    const newEdges = [];\n    const positions = {};\n    const indexMap = topologicalSortWithIndex(data);\n    console.log(indexMap);\n\n    // Function to calculate position\n    const calculatePosition = node => {\n      if (!positions[node]) {\n        const curr = flag * xchange;\n        positions[node] = {\n          x: xpos + curr,\n          y: 100 * indexMap.get(node)\n        };\n        console.log(positions[node]);\n        console.log(xpos, xchange);\n        if (flag == 1) flag = -1;else flag = 1;\n        ypos += 100;\n        xchange += 50;\n      }\n      return positions[node];\n    };\n    const getEdgeColor = key => {\n      switch (key) {\n        case 0:\n          return 'gray';\n        case 1:\n          return 'green';\n        case 2:\n          return 'yellow';\n        case 3:\n          return 'orange';\n        default:\n          return 'black';\n      }\n    };\n    Object.keys(data).forEach(source => {\n      if (!newNodes.find(node => node.id === source)) {\n        newNodes.push({\n          id: source,\n          data: {\n            label: source\n          },\n          position: calculatePosition(source)\n        });\n      }\n      Object.keys(data[source]).forEach(target => {\n        if (!newNodes.find(node => node.id === target)) {\n          newNodes.push({\n            id: target,\n            data: {\n              label: target\n            },\n            position: calculatePosition(target)\n          });\n        }\n        const {\n          key,\n          value\n        } = data[source][target];\n        console.log(key);\n        newEdges.push({\n          id: `e${source}-${target}`,\n          source,\n          target,\n          type: CustomEdge,\n          label: value,\n          markerEnd: {\n            type: 'arrow'\n          },\n          style: {\n            stroke: getEdgeColor(key)\n          } // Coloring based on key\n        });\n      });\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    ref: reactFlowWrapper,\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewTree, \"ntMxZXLjuew7Kh9E01wvbC30yAs=\", false, function () {\n  return [useLocation];\n});\n_c = ViewTree;\nexport default ViewTree;\nvar _c;\n$RefreshReg$(_c, \"ViewTree\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ReactFlow","MiniMap","Controls","Background","useLocation","axios","CustomEdge","jsxDEV","_jsxDEV","ViewTree","_s","nodes","setNodes","edges","setEdges","reactFlowWrapper","location","queryParams","URLSearchParams","search","dataParam","get","graphData","JSON","parse","decodeURIComponent","console","log","newresp","updateSubtreeValues","data","processGraphData","error","topologicalSortWithIndex","graph","visited","Set","stack","indexMap","Map","visit","node","has","add","Object","keys","forEach","neighbor","push","sortedNodes","reverse","index","set","updateSubtreeValue","result","stringify","flag","updateSubtreeRecursive","value","target","updateSubtree","key","ypos","xpos","xchange","newNodes","newEdges","positions","calculatePosition","curr","x","y","getEdgeColor","source","find","id","label","position","type","markerEnd","style","stroke","height","ref","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport CustomEdge from './CustomEdge'\r\nconst ViewTree = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const reactFlowWrapper = useRef(null);\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const queryParams = new URLSearchParams(location.search);\r\n    const dataParam = queryParams.get('data');\r\n    if (dataParam) {\r\n      try {\r\n        // Decoding and parsing the graph data\r\n        const graphData = JSON.parse(decodeURIComponent(dataParam));\r\n        console.log(graphData);\r\n        const newresp = updateSubtreeValues(graphData);\r\n        console.log(newresp.data);\r\n        processGraphData(newresp.data);\r\n      } catch (error) {\r\n        console.error('Error parsing graph data:', error);\r\n      }\r\n    }\r\n  }, [location]);\r\n\r\n\r\n  // Function to perform topological sorting and return a map with indices\r\n  const topologicalSortWithIndex = (graph) => {\r\n    const visited = new Set();\r\n    const stack = [];\r\n    const indexMap = new Map();\r\n    \r\n    const visit = (node) => {\r\n      if (visited.has(node)) return;\r\n      visited.add(node);\r\n      if (graph[node]) {\r\n        Object.keys(graph[node]).forEach((neighbor) => visit(neighbor));\r\n      }\r\n      stack.push(node);\r\n    };\r\n\r\n    Object.keys(graph).forEach(visit);\r\n    const sortedNodes = stack.reverse();\r\n    \r\n    // Building the index map\r\n    sortedNodes.forEach((node, index) => {\r\n      indexMap.set(node, index);\r\n    });\r\n\r\n    return indexMap;\r\n  };\r\n\r\n\r\n  const updateSubtreeValue = (graph) => {\r\n    const result = JSON.parse(JSON.stringify(graph));\r\n    let flag = 1;\r\n    updateSubtreeRecursive = (node, value) => {\r\n      graph.forEach((target) => {\r\n        if(value==0) result[node][target]\r\n        if(result[node][target]==0){\r\n\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  const updateSubtreeValues = (graph) => {\r\n    const result = JSON.parse(JSON.stringify(graph)); // Deep copy to avoid mutating the original graph\r\n  \r\n    const updateSubtree = (node) => {\r\n      if (!result[node]) return;\r\n      console.log(node);\r\n      // If the node has a number value of 0, update its subtree\r\n      Object.keys(result[node]).forEach((target) => {\r\n        const { key } = result[node][target];\r\n        if (key === 0) {\r\n          // Update the current node and all nodes in the subtree\r\n          updateSubtreeRecursive(target);\r\n        }\r\n      });\r\n    };\r\n  \r\n    const updateSubtreeRecursive = (node) => {\r\n      if (!result[node]) return;\r\n      // Set the number value of the current node to 0\r\n      Object.keys(result[node]).forEach((target) => {\r\n        result[node][target].key = 0;\r\n        updateSubtreeRecursive(target);\r\n      });\r\n    };\r\n    console.log(result);\r\n    Object.keys(result).forEach(updateSubtree);\r\n    console.log(result);\r\n    return result;\r\n  };\r\n  \r\n\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     try {\r\n      //   const response = {\r\n      //     \"GenderCheck\": {\r\n      //         \"PincodeCheck\": {\r\n      //             \"key\": 0,\r\n      //             \"value\": \"Male\"\r\n      //         },\r\n      //         \"LoanStatus\": {\r\n      //             \"key\": 2,\r\n      //             \"value\": \"Female\"\r\n      //         }\r\n      //     },\r\n      //     \"PincodeCheck\": {\r\n      //         \"LoanStatus\": {\r\n      //             \"key\": 3,\r\n      //             \"value\": \"Starts with 40\"\r\n      //         }\r\n      //     },\r\n      //     \"DobCheck\": {\r\n      //         \"GenderCheck\": {\r\n      //             \"key\": 0,\r\n      //             \"value\": \"age>25\"\r\n      //         }\r\n      //     }\r\n      // };\r\n  //     const response = {\r\n  //       a: {\r\n  //         b: {\r\n  //           key: 1,\r\n  //           value: \"B\",\r\n  //         },\r\n  //         c: {\r\n  //           key: 1,\r\n  //           value: \"C\",\r\n  //         },\r\n  //       },\r\n  //       b: {\r\n  //         d: {\r\n  //           key: 0,\r\n  //           value: \"D\",\r\n  //         },\r\n  //         e: {\r\n  //           key: 0,\r\n  //           value: \"E\",\r\n  //         },\r\n  //       },\r\n  //       c: {\r\n  //         f: {\r\n  //           key: 0,\r\n  //           value: \"F\",\r\n  //         },\r\n  //         g: {\r\n  //           key: 1,\r\n  //           value: \"G\",\r\n  //         },\r\n  //       },\r\n  //       g: {\r\n  //         h: {\r\n  //           key: 2,\r\n  //           value: \"H\",\r\n  //         },\r\n  //         i: {\r\n  //           key: 0,\r\n  //           value: \"I\",\r\n  //         },\r\n  //       },\r\n  //       i: {\r\n  //         e: {\r\n  //           key: 3,\r\n  //           value: \"random\"\r\n  //         }\r\n  //       }\r\n  //     };\r\n\r\n      \r\n  //     } catch (error) {\r\n  //       console.error('Error fetching data:', error);\r\n  //     }\r\n  //   };\r\n\r\n  //   fetchData();\r\n  // }, []);\r\n\r\n  let ypos = 0, xpos = 1000, xchange = 50, flag = 1;\r\n\r\n  const processGraphData = (data) => {\r\n    const newNodes = [];\r\n    const newEdges = [];\r\n    const positions = {};\r\n    const indexMap = topologicalSortWithIndex(data);\r\n    console.log(indexMap);\r\n\r\n    // Function to calculate position\r\n    const calculatePosition = (node) => {\r\n      if (!positions[node]) {\r\n        const curr = (flag*xchange);\r\n        positions[node] = { x: xpos+curr, y: 100*indexMap.get(node) };\r\n        console.log(positions[node]);\r\n        console.log(xpos, xchange);\r\n        if(flag == 1) flag = -1;\r\n        else flag = 1;\r\n        ypos += 100;\r\n        xchange += 50;\r\n      }\r\n      return positions[node];\r\n    };\r\n\r\n\r\n    const getEdgeColor = (key) => {\r\n      switch (key) {\r\n        case 0:\r\n          return 'gray';\r\n        case 1:\r\n          return 'green';\r\n        case 2:\r\n          return 'yellow';\r\n        case 3:\r\n          return 'orange';\r\n        default:\r\n          return 'black';\r\n      }\r\n    };\r\n\r\n    Object.keys(data).forEach((source) => {\r\n      if (!newNodes.find((node) => node.id === source)) {\r\n        newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n      }\r\n      Object.keys(data[source]).forEach((target) => {\r\n        if (!newNodes.find((node) => node.id === target)) {\r\n          newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n        }\r\n        const { key, value } = data[source][target];\r\n        console.log(key);\r\n        newEdges.push({\r\n          id: `e${source}-${target}`,\r\n          source,\r\n          target,\r\n          type: CustomEdge,\r\n          label: value,\r\n          markerEnd: {\r\n            type: 'arrow',\r\n          },\r\n          style: { stroke: getEdgeColor(key) }, // Coloring based on key\r\n        });\r\n      });\r\n    });\r\n\r\n    setNodes(newNodes);\r\n    setEdges(newEdges);\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: '100vh' }} ref={reactFlowWrapper}>\r\n      <ReactFlow nodes={nodes} edges={edges} fitView>\r\n        <MiniMap />\r\n        <Controls />\r\n        <Background />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewTree;\r\n\r\n\r\n\r\n"],"mappings":"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,CAAC,EAAE;MACnBf,OAAO,CAACC,GAAG,CAACc,IAAI,CAAC;MACjB;MACAG,MAAM,CAACC,IAAI,CAACS,MAAM,CAACb,IAAI,CAAC,CAAC,CAACK,OAAO,CAAEa,MAAM,IAAK;QAC5C,MAAM;UAAEE;QAAI,CAAC,GAAGP,MAAM,CAACb,IAAI,CAAC,CAACkB,MAAM,CAAC;QACpC,IAAIE,GAAG,KAAK,CAAC,EAAE;UACb;UACAJ,sBAAsB,CAACE,MAAM,CAAC;QAChC;MACF,CAAC,CAAC;IACJ,CAAC;IAED,MAAMF,sBAAsB,GAAIhB,IAAI,IAAK;MACvC,IAAI,CAACa,MAAM,CAACb,IAAI,CAAC,EAAE;MACnB;MACAG,MAAM,CAACC,IAAI,CAACS,MAAM,CAACb,IAAI,CAAC,CAAC,CAACK,OAAO,CAAEa,MAAM,IAAK;QAC5CL,MAAM,CAACb,IAAI,CAAC,CAACkB,MAAM,CAAC,CAACE,GAAG,GAAG,CAAC;QAC5BJ,sBAAsB,CAACE,MAAM,CAAC;MAChC,CAAC,CAAC;IACJ,CAAC;IACDjC,OAAO,CAACC,GAAG,CAAC2B,MAAM,CAAC;IACnBV,MAAM,CAACC,IAAI,CAACS,MAAM,CAAC,CAACR,OAAO,CAACc,aAAa,CAAC;IAC1ClC,OAAO,CAACC,GAAG,CAAC2B,MAAM,CAAC;IACnB,OAAOA,MAAM;EACf,CAAC;;EAGD;EACA;EACA;EACI;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;;EAEA;EACA;;EAEA,IAAIQ,IAAI,GAAG,CAAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}