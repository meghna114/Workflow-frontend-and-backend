{"ast":null,"code":"var _jsxFileName = \"/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\n// import axios from 'axios';\n\n// const ViewTree = () => {\n//   const [nodes, setNodes] = useState([]);\n//   const [edges, setEdges] = useState([]);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         // const response = await axios.get('http://localhost:8080/api/graph-data');\n//         const response = {\n//           \"GenderCheck\": {\n//               \"PincodeCheck\": {\n//                   \"key\": 0,\n//                   \"value\": \"Male\"\n//               },\n//               \"LoanStatus\": {\n//                   \"key\": 2,\n//                   \"value\": \"Female\"\n//               }\n//           },\n//           \"PincodeCheck\": {\n//               \"LoanStatus\": {\n//                   \"key\": 3,\n//                   \"value\": \"Starts with 40\"\n//               }\n//           },\n//           \"DobCheck\": {\n//               \"GenderCheck\": {\n//                   \"key\": 0,\n//                   \"value\": \"age>25\"\n//               }\n//           }\n//       };\n//         processGraphData(response);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const processGraphData = (data) => {\n//     const newNodes = [];\n//     const newEdges = [];\n//     const positions = {};\n//     let yOffset = 0;\n\n//     // Function to calculate position\n//     const calculatePosition = (node) => {\n//       if (!positions[node]) {\n//         positions[node] = { x: 250, y: yOffset };\n//         yOffset += 100;\n//       }\n//       return positions[node];\n//     };\n\n//     Object.keys(data).forEach((source) => {\n//       if (!newNodes.find((node) => node.id === source)) {\n//         newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\n//       }\n//       Object.keys(data[source]).forEach((target) => {\n//         if (!newNodes.find((node) => node.id === target)) {\n//           newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\n//         }\n//         const { key, value } = data[source][target];\n//         newEdges.push({\n//           id: `e${source}-${target}`,\n//           source,\n//           target,\n//           label: value,\n//           style: { stroke: `hsl(${key * 36}, 100%, 50%)` }, // Coloring based on key\n//         });\n//       });\n//     });\n\n//     setNodes(newNodes);\n//     setEdges(newEdges);\n//   };\n\n//   return (\n//     <div style={{ height: 1000 }}>\n//       <ReactFlow nodes={nodes} edges={edges} fitView>\n//         <MiniMap />\n//         <Controls />\n//         <Background />\n//       </ReactFlow>\n//     </div>\n//   );\n// };\n\n// export default ViewTree;\n\n// import React from 'react';\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\n\n// // Define the nodes\n// const nodes = [\n//   // Start Node\n//   { id: '1', data: { label: 'Start' }, position: { x: 250, y: 5 } },\n\n//   // Input Node\n//   { id: '2', data: { label: 'Input: Name, DOB, Gender, Pincode' }, position: { x: 250, y: 100 } },\n\n//   // Check Age Node\n//   { id: '3', data: { label: 'Check Age' }, position: { x: 250, y: 200 } },\n\n//   // Age > 30 Node\n//   { id: '4', data: { label: 'Age > 30' }, position: { x: 100, y: 300 } },\n\n//   // Age < 30 Node\n//   { id: '5', data: { label: 'Age < 30' }, position: { x: 400, y: 300 } },\n\n//   // Update DB Node for Age < 30\n//   { id: '6', data: { label: 'Update DB: status = \\'loan_approved\\' and dob_less_than_30 = \\'Y\\'' }, position: { x: 400, y: 400 } },\n\n//   // End Node for Age < 30\n//   { id: '7', data: { label: 'End' }, position: { x: 400, y: 500 } },\n\n//   // Update DB Node for Age > 30\n//   { id: '8', data: { label: 'Update DB: dob_less_than_30 = \\'N\\'' }, position: { x: 100, y: 400 } },\n\n//   // Gender Check Node\n//   { id: '9', data: { label: 'Check Gender' }, position: { x: 100, y: 500 } },\n\n//   // Male Node\n//   { id: '10', data: { label: 'Gender = Male' }, position: { x: -50, y: 600 } },\n\n//   // Female Node\n//   { id: '11', data: { label: 'Gender = Female' }, position: { x: 350, y: 600 } },\n\n//   // Update DB Node for Female\n//   { id: '12', data: { label: 'Update DB: status = \\'loan_approved\\'' }, position: { x: 350, y: 700 } },\n//     // End Node for female\n//     { id: '22', data: { label: 'End' }, position: { x: 350, y: 800 } },\n\n//   // Pincode Check Node\n//   { id: '13', data: { label: 'Check Pincode' }, position: { x: -50, y: 700 } },\n\n//   // Pincode Starts with '40' Node\n//   { id: '14', data: { label: 'Pincode starts with \\'40\\'' }, position: { x: -300, y: 800 } },\n\n//   // Pincode Else Node\n//   { id: '15', data: { label: 'Pincode Else' }, position: { x: 150, y: 800 } },\n\n//   // Update DB Node for Pincode Starts with '40'\n//   { id: '17', data: { label: 'Update DB: status = \\'loan_approval_required\\'' }, position: { x: -300, y: 900 } },\n\n//   // End Node for Pincode Starts with '40'\n//   { id: '18', data: { label: 'End' }, position: { x: -300, y: 1000 } },\n\n//   // Update DB Node for Pincode Else\n//   { id: '20', data: { label: 'Update DB: status = \\'loan_approved\\'' }, position: { x: 150, y: 900 } },\n\n//   // End Node for Pincode Else\n//   { id: '21', data: { label: 'End' }, position: { x: 150, y: 1000 } },\n\n// ];\n\n// // Define the edges\n// const edges = [\n//   { id: 'e1', source: '1', target: '2' },\n//   { id: 'e2', source: '2', target: '3' },\n//   { id: 'e3', source: '3', target: '4'},\n//   { id: 'e4', source: '3', target: '5'},\n//   { id: 'e5', source: '5', target: '6' },\n//   { id: 'e6', source: '6', target: '7' },\n//   { id: 'e7', source: '4', target: '8' },\n//   { id: 'e8', source: '8', target: '9' },\n//   { id: 'e9', source: '9', target: '10' },\n//   { id: 'e10', source: '9', target: '11'},\n//   { id: 'e19', source: '12', target: '22'  },// Connect Female to End Node\n//   { id: 'e11', source: '10', target: '13' }, // Male leads to Pincode Check Node\n//   { id: 'e12', source: '13', target: '14' },\n//   { id: 'e13', source: '13', target: '15' },\n//   { id: 'e14', source: '14', target: '17' }, // Pincode Starts with '40' leads to Update DB Node\n//   { id: 'e15', source: '17', target: '18' }, // Update DB Node for Pincode Starts with '40' leads to End\n\n//   { id: 'e16', source: '15', target: '20' }, // Pincode Else leads to Update DB Node\n//   { id: 'e17', source: '20', target: '21' }, // Update DB Node for Pincode Else leads to End\n\n//   { id: 'e18', source: '11', target: '12' },\n\n// ];\n\n// // Define the end node\n// const endNode = { id: '21', data: { label: 'End' }, position: { x: 150, y: 1000 } };\n\n// const ViewTree = () => (\n//   <div style={{ height: 1000 }}>\n//     <ReactFlow nodes={[...nodes, endNode]} edges={edges} fitView>\n//       <MiniMap />\n//       <Controls />\n//       <Background />\n//     </ReactFlow>\n//   </div>\n// );\n\n// export default ViewTree;\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConditionalWorkflowChart = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const reactFlowWrapper = useRef(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:8080/api/graph-data');\n        const data = response.data;\n        processGraphData(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const processGraphData = data => {\n    const newNodes = [];\n    const newEdges = [];\n    const positions = {};\n    let yOffset = 0;\n\n    // Function to calculate position\n    const calculatePosition = node => {\n      if (!positions[node]) {\n        positions[node] = {\n          x: 250,\n          y: yOffset\n        };\n        yOffset += 100;\n      }\n      return positions[node];\n    };\n    Object.keys(data).forEach(source => {\n      if (!newNodes.find(node => node.id === source)) {\n        newNodes.push({\n          id: source,\n          data: {\n            label: source\n          },\n          position: calculatePosition(source)\n        });\n      }\n      Object.keys(data[source]).forEach(target => {\n        if (!newNodes.find(node => node.id === target)) {\n          newNodes.push({\n            id: target,\n            data: {\n              label: target\n            },\n            position: calculatePosition(target)\n          });\n        }\n        const {\n          key,\n          value\n        } = data[source][target];\n        newEdges.push({\n          id: `e${source}-${target}`,\n          source,\n          target,\n          label: value,\n          style: {\n            stroke: `hsl(${key * 36}, 100%, 50%)`\n          } // Coloring based on key\n        });\n      });\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    ref: reactFlowWrapper,\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 286,\n    columnNumber: 5\n  }, this);\n};\n_s(ConditionalWorkflowChart, \"jhHm/61oZxklEsWL1oW/Uo9Ucq4=\");\n_c = ConditionalWorkflowChart;\nexport default ConditionalWorkflowChart;\nvar _c;\n$RefreshReg$(_c, \"ConditionalWorkflowChart\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ReactFlow","MiniMap","Controls","Background","axios","jsxDEV","_jsxDEV","ConditionalWorkflowChart","_s","nodes","setNodes","edges","setEdges","reactFlowWrapper","fetchData","response","get","data","processGraphData","error","console","newNodes","newEdges","positions","yOffset","calculatePosition","node","x","y","Object","keys","forEach","source","find","id","push","label","position","target","key","value","style","stroke","height","ref","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx"],"sourcesContent":["\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from 'react';\r\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\n// import axios from 'axios';\r\n\r\n// const ViewTree = () => {\r\n//   const [nodes, setNodes] = useState([]);\r\n//   const [edges, setEdges] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         // const response = await axios.get('http://localhost:8080/api/graph-data');\r\n//         const response = {\r\n//           \"GenderCheck\": {\r\n//               \"PincodeCheck\": {\r\n//                   \"key\": 0,\r\n//                   \"value\": \"Male\"\r\n//               },\r\n//               \"LoanStatus\": {\r\n//                   \"key\": 2,\r\n//                   \"value\": \"Female\"\r\n//               }\r\n//           },\r\n//           \"PincodeCheck\": {\r\n//               \"LoanStatus\": {\r\n//                   \"key\": 3,\r\n//                   \"value\": \"Starts with 40\"\r\n//               }\r\n//           },\r\n//           \"DobCheck\": {\r\n//               \"GenderCheck\": {\r\n//                   \"key\": 0,\r\n//                   \"value\": \"age>25\"\r\n//               }\r\n//           }\r\n//       };\r\n//         processGraphData(response);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const processGraphData = (data) => {\r\n//     const newNodes = [];\r\n//     const newEdges = [];\r\n//     const positions = {};\r\n//     let yOffset = 0;\r\n\r\n//     // Function to calculate position\r\n//     const calculatePosition = (node) => {\r\n//       if (!positions[node]) {\r\n//         positions[node] = { x: 250, y: yOffset };\r\n//         yOffset += 100;\r\n//       }\r\n//       return positions[node];\r\n//     };\r\n\r\n//     Object.keys(data).forEach((source) => {\r\n//       if (!newNodes.find((node) => node.id === source)) {\r\n//         newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n//       }\r\n//       Object.keys(data[source]).forEach((target) => {\r\n//         if (!newNodes.find((node) => node.id === target)) {\r\n//           newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n//         }\r\n//         const { key, value } = data[source][target];\r\n//         newEdges.push({\r\n//           id: `e${source}-${target}`,\r\n//           source,\r\n//           target,\r\n//           label: value,\r\n//           style: { stroke: `hsl(${key * 36}, 100%, 50%)` }, // Coloring based on key\r\n//         });\r\n//       });\r\n//     });\r\n\r\n//     setNodes(newNodes);\r\n//     setEdges(newEdges);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ height: 1000 }}>\r\n//       <ReactFlow nodes={nodes} edges={edges} fitView>\r\n//         <MiniMap />\r\n//         <Controls />\r\n//         <Background />\r\n//       </ReactFlow>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewTree;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\n \r\n// // Define the nodes\r\n// const nodes = [\r\n//   // Start Node\r\n//   { id: '1', data: { label: 'Start' }, position: { x: 250, y: 5 } },\r\n \r\n//   // Input Node\r\n//   { id: '2', data: { label: 'Input: Name, DOB, Gender, Pincode' }, position: { x: 250, y: 100 } },\r\n \r\n//   // Check Age Node\r\n//   { id: '3', data: { label: 'Check Age' }, position: { x: 250, y: 200 } },\r\n \r\n//   // Age > 30 Node\r\n//   { id: '4', data: { label: 'Age > 30' }, position: { x: 100, y: 300 } },\r\n \r\n//   // Age < 30 Node\r\n//   { id: '5', data: { label: 'Age < 30' }, position: { x: 400, y: 300 } },\r\n \r\n//   // Update DB Node for Age < 30\r\n//   { id: '6', data: { label: 'Update DB: status = \\'loan_approved\\' and dob_less_than_30 = \\'Y\\'' }, position: { x: 400, y: 400 } },\r\n \r\n//   // End Node for Age < 30\r\n//   { id: '7', data: { label: 'End' }, position: { x: 400, y: 500 } },\r\n \r\n//   // Update DB Node for Age > 30\r\n//   { id: '8', data: { label: 'Update DB: dob_less_than_30 = \\'N\\'' }, position: { x: 100, y: 400 } },\r\n \r\n//   // Gender Check Node\r\n//   { id: '9', data: { label: 'Check Gender' }, position: { x: 100, y: 500 } },\r\n \r\n//   // Male Node\r\n//   { id: '10', data: { label: 'Gender = Male' }, position: { x: -50, y: 600 } },\r\n \r\n//   // Female Node\r\n//   { id: '11', data: { label: 'Gender = Female' }, position: { x: 350, y: 600 } },\r\n \r\n \r\n//   // Update DB Node for Female\r\n//   { id: '12', data: { label: 'Update DB: status = \\'loan_approved\\'' }, position: { x: 350, y: 700 } },\r\n//     // End Node for female\r\n//     { id: '22', data: { label: 'End' }, position: { x: 350, y: 800 } },\r\n \r\n//   // Pincode Check Node\r\n//   { id: '13', data: { label: 'Check Pincode' }, position: { x: -50, y: 700 } },\r\n \r\n//   // Pincode Starts with '40' Node\r\n//   { id: '14', data: { label: 'Pincode starts with \\'40\\'' }, position: { x: -300, y: 800 } },\r\n \r\n//   // Pincode Else Node\r\n//   { id: '15', data: { label: 'Pincode Else' }, position: { x: 150, y: 800 } },\r\n \r\n//   // Update DB Node for Pincode Starts with '40'\r\n//   { id: '17', data: { label: 'Update DB: status = \\'loan_approval_required\\'' }, position: { x: -300, y: 900 } },\r\n \r\n//   // End Node for Pincode Starts with '40'\r\n//   { id: '18', data: { label: 'End' }, position: { x: -300, y: 1000 } },\r\n \r\n//   // Update DB Node for Pincode Else\r\n//   { id: '20', data: { label: 'Update DB: status = \\'loan_approved\\'' }, position: { x: 150, y: 900 } },\r\n \r\n//   // End Node for Pincode Else\r\n//   { id: '21', data: { label: 'End' }, position: { x: 150, y: 1000 } },\r\n \r\n// ];\r\n \r\n// // Define the edges\r\n// const edges = [\r\n//   { id: 'e1', source: '1', target: '2' },\r\n//   { id: 'e2', source: '2', target: '3' },\r\n//   { id: 'e3', source: '3', target: '4'},\r\n//   { id: 'e4', source: '3', target: '5'},\r\n//   { id: 'e5', source: '5', target: '6' },\r\n//   { id: 'e6', source: '6', target: '7' },\r\n//   { id: 'e7', source: '4', target: '8' },\r\n//   { id: 'e8', source: '8', target: '9' },\r\n//   { id: 'e9', source: '9', target: '10' },\r\n//   { id: 'e10', source: '9', target: '11'},\r\n//   { id: 'e19', source: '12', target: '22'  },// Connect Female to End Node\r\n//   { id: 'e11', source: '10', target: '13' }, // Male leads to Pincode Check Node\r\n//   { id: 'e12', source: '13', target: '14' },\r\n//   { id: 'e13', source: '13', target: '15' },\r\n//   { id: 'e14', source: '14', target: '17' }, // Pincode Starts with '40' leads to Update DB Node\r\n//   { id: 'e15', source: '17', target: '18' }, // Update DB Node for Pincode Starts with '40' leads to End\r\n \r\n//   { id: 'e16', source: '15', target: '20' }, // Pincode Else leads to Update DB Node\r\n//   { id: 'e17', source: '20', target: '21' }, // Update DB Node for Pincode Else leads to End\r\n \r\n//   { id: 'e18', source: '11', target: '12' },\r\n \r\n// ];\r\n \r\n// // Define the end node\r\n// const endNode = { id: '21', data: { label: 'End' }, position: { x: 150, y: 1000 } };\r\n \r\n// const ViewTree = () => (\r\n//   <div style={{ height: 1000 }}>\r\n//     <ReactFlow nodes={[...nodes, endNode]} edges={edges} fitView>\r\n//       <MiniMap />\r\n//       <Controls />\r\n//       <Background />\r\n//     </ReactFlow>\r\n//   </div>\r\n// );\r\n \r\n\r\n// export default ViewTree;\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\nimport axios from 'axios';\r\n\r\nconst ConditionalWorkflowChart = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const reactFlowWrapper = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:8080/api/graph-data');\r\n        const data = response.data;\r\n        processGraphData(data);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const processGraphData = (data) => {\r\n    const newNodes = [];\r\n    const newEdges = [];\r\n    const positions = {};\r\n    let yOffset = 0;\r\n\r\n    // Function to calculate position\r\n    const calculatePosition = (node) => {\r\n      if (!positions[node]) {\r\n        positions[node] = { x: 250, y: yOffset };\r\n        yOffset += 100;\r\n      }\r\n      return positions[node];\r\n    };\r\n\r\n    Object.keys(data).forEach((source) => {\r\n      if (!newNodes.find((node) => node.id === source)) {\r\n        newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n      }\r\n      Object.keys(data[source]).forEach((target) => {\r\n        if (!newNodes.find((node) => node.id === target)) {\r\n          newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n        }\r\n        const { key, value } = data[source][target];\r\n        newEdges.push({\r\n          id: `e${source}-${target}`,\r\n          source,\r\n          target,\r\n          label: value,\r\n          style: { stroke: `hsl(${key * 36}, 100%, 50%)` }, // Coloring based on key\r\n        });\r\n      });\r\n    });\r\n\r\n    setNodes(newNodes);\r\n    setEdges(newEdges);\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: '100vh' }} ref={reactFlowWrapper}>\r\n      <ReactFlow nodes={nodes} edges={edges} fitView>\r\n        <MiniMap />\r\n        <Controls />\r\n        <Background />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ConditionalWorkflowChart;\r\n"],"mappings":";;AAIA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAaA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAKA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,SAAS,IAAIC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,qBAAqB;AAC9E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,wBAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,C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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}