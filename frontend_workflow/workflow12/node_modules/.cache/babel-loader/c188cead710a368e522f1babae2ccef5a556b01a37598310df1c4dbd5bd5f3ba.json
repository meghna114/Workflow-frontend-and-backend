{"ast":null,"code":"// // src/components/ViewTree.jsx\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import ReactFlow, { ReactFlowProvider, addEdge, Background, Controls, MiniMap } from 'reactflow';\n// import 'reactflow/dist/style.css';\n// import './ViewTree.css';\n\n// const ViewTree = ({ match }) => {\n//   const [elements, setElements] = useState([]);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     const fetchWorkflowJsonData = async () => {\n//       try {\n//         const response = await axios.get(`/api/get-workflow-json/${match.params.workflowId}`);\n//         generateElements(response.data.workflow, response.data.jsonData);\n//       } catch (error) {\n//         setError('Error fetching workflow and JSON data.');\n//       }\n//     };\n//     fetchWorkflowJsonData();\n//   }, [match.params.workflowId]);\n\n//   const generateElements = (workflow, jsonData) => {\n//     const newElements = [];\n//     const generateElement = (node, parentId = null) => {\n//       const nodeId = `${parentId ? `${parentId}-` : ''}${newElements.length}`;\n//       const isSatisfied = jsonData[node.name] !== undefined; // Check if the JSON data satisfies the node\n//       newElements.push({\n//         id: nodeId,\n//         data: { label: node.name || 'Unnamed Node' },\n//         position: { x: Math.random() * 250, y: Math.random() * 250 },\n//         style: { backgroundColor: isSatisfied ? 'green' : 'grey' }, // Set color based on satisfaction\n//       });\n//       if (parentId) {\n//         newElements.push({\n//           id: `e${parentId}-${nodeId}`,\n//           source: parentId,\n//           target: nodeId,\n//         });\n//       }\n//       if (node.children) {\n//         node.children.forEach((child) => generateElement(child, nodeId));\n//       }\n//     };\n//     generateElement(workflow);\n//     setElements(newElements);\n//   };\n\n//   return (\n//     <div className=\"view-tree-container\">\n//       <h1>Workflow Tree</h1>\n//       {error && <div className=\"error-message\">{error}</div>}\n//       <div className=\"react-flow-wrapper\" style={{ height: '80vh', width: '100%' }}>\n//         <ReactFlowProvider>\n//           <ReactFlow\n//             elements={elements}\n//             style={{ width: '100%', height: '100%' }}\n//             snapToGrid={true}\n//             snapGrid={[15, 15]}\n//             onConnect={(params) => setElements((els) => addEdge(params, els))}\n//           >\n//             <Background color=\"#aaa\" gap={16} />\n//             <Controls />\n//             <MiniMap nodeColor={(node) => {\n//               switch (node.type) {\n//                 case 'input':\n//                   return 'blue';\n//                 case 'output':\n//                   return 'green';\n//                 default:\n//                   return '#00ff00';\n//               }\n//             }} />\n//           </ReactFlow>\n//         </ReactFlowProvider>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ViewTree;","map":{"version":3,"names":[],"sources":["/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx"],"sourcesContent":["// // src/components/ViewTree.jsx\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n// import ReactFlow, { ReactFlowProvider, addEdge, Background, Controls, MiniMap } from 'reactflow';\r\n// import 'reactflow/dist/style.css';\r\n// import './ViewTree.css';\r\n\r\n// const ViewTree = ({ match }) => {\r\n//   const [elements, setElements] = useState([]);\r\n//   const [error, setError] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     const fetchWorkflowJsonData = async () => {\r\n//       try {\r\n//         const response = await axios.get(`/api/get-workflow-json/${match.params.workflowId}`);\r\n//         generateElements(response.data.workflow, response.data.jsonData);\r\n//       } catch (error) {\r\n//         setError('Error fetching workflow and JSON data.');\r\n//       }\r\n//     };\r\n//     fetchWorkflowJsonData();\r\n//   }, [match.params.workflowId]);\r\n\r\n//   const generateElements = (workflow, jsonData) => {\r\n//     const newElements = [];\r\n//     const generateElement = (node, parentId = null) => {\r\n//       const nodeId = `${parentId ? `${parentId}-` : ''}${newElements.length}`;\r\n//       const isSatisfied = jsonData[node.name] !== undefined; // Check if the JSON data satisfies the node\r\n//       newElements.push({\r\n//         id: nodeId,\r\n//         data: { label: node.name || 'Unnamed Node' },\r\n//         position: { x: Math.random() * 250, y: Math.random() * 250 },\r\n//         style: { backgroundColor: isSatisfied ? 'green' : 'grey' }, // Set color based on satisfaction\r\n//       });\r\n//       if (parentId) {\r\n//         newElements.push({\r\n//           id: `e${parentId}-${nodeId}`,\r\n//           source: parentId,\r\n//           target: nodeId,\r\n//         });\r\n//       }\r\n//       if (node.children) {\r\n//         node.children.forEach((child) => generateElement(child, nodeId));\r\n//       }\r\n//     };\r\n//     generateElement(workflow);\r\n//     setElements(newElements);\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"view-tree-container\">\r\n//       <h1>Workflow Tree</h1>\r\n//       {error && <div className=\"error-message\">{error}</div>}\r\n//       <div className=\"react-flow-wrapper\" style={{ height: '80vh', width: '100%' }}>\r\n//         <ReactFlowProvider>\r\n//           <ReactFlow\r\n//             elements={elements}\r\n//             style={{ width: '100%', height: '100%' }}\r\n//             snapToGrid={true}\r\n//             snapGrid={[15, 15]}\r\n//             onConnect={(params) => setElements((els) => addEdge(params, els))}\r\n//           >\r\n//             <Background color=\"#aaa\" gap={16} />\r\n//             <Controls />\r\n//             <MiniMap nodeColor={(node) => {\r\n//               switch (node.type) {\r\n//                 case 'input':\r\n//                   return 'blue';\r\n//                 case 'output':\r\n//                   return 'green';\r\n//                 default:\r\n//                   return '#00ff00';\r\n//               }\r\n//             }} />\r\n//           </ReactFlow>\r\n//         </ReactFlowProvider>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewTree;\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}