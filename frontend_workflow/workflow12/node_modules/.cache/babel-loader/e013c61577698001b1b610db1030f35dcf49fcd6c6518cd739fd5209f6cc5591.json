{"ast":null,"code":"var _jsxFileName = \"/home/aditya/Desktop/frontend workflow/workflow12/src/components/EditWorkflow.jsx\",\n  _s = $RefreshSig$();\n// src/components/EditWorkflow.jsx\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport ConditionRow from \"./ConditionRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditWorkflow = () => {\n  _s();\n  const [rows, setRows] = useState([]);\n  const [error, setError] = useState(\"\");\n  const [saveMessage, setSaveMessage] = useState(\"\");\n  const navigate = useNavigate();\n  const location = useLocation();\n  const {\n    workflow\n  } = location.state;\n  useEffect(() => {\n    if (workflow) {\n      setRows(workflow.steps);\n    }\n  }, [workflow]);\n  const addRow = () => {\n    setRows(prevRows => [...prevRows, {}]);\n    setError(\"\");\n  };\n  const handleConditionChange = (index, condition) => {\n    setRows(prevRows => {\n      const updatedRows = [...prevRows];\n      updatedRows[index] = condition;\n      return updatedRows;\n    });\n  };\n  const validateRows = () => {\n    return true;\n    // Add your validation logic here\n  };\n  const handleUpdateClick = async () => {\n    if (validateRows()) {\n      const updatedWorkflow = {\n        ...workflow,\n        steps: rows\n      };\n      try {\n        const response = await axios.put(`http://localhost:8080/workflows/${workflow.id}`, updatedWorkflow);\n        setSaveMessage(\"Workflow updated successfully!\");\n        setError(\"\");\n        navigate(\"/view-workflows\");\n      } catch (error) {\n        setError(\"Error updating workflow. Please try again.\");\n      }\n    } else {\n      setError(\"Please fill in all fields correctly before saving.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"condition-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Edit Workflow\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), rows.map((row, index) => /*#__PURE__*/_jsxDEV(ConditionRow, {\n      index: index,\n      onConditionChange: handleConditionChange,\n      prefill: row\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: addRow,\n        children: \"Add Condition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: handleUpdateClick,\n        children: \"Update Workflow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }, this), saveMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: saveMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(EditWorkflow, \"Ofk/GWLK7EK3SdHtgeH1q2sWEKM=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = EditWorkflow;\nexport default EditWorkflow;\nvar _c;\n$RefreshReg$(_c, \"EditWorkflow\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useLocation","axios","ConditionRow","jsxDEV","_jsxDEV","EditWorkflow","_s","rows","setRows","error","setError","saveMessage","setSaveMessage","navigate","location","workflow","state","steps","addRow","prevRows","handleConditionChange","index","condition","updatedRows","validateRows","handleUpdateClick","updatedWorkflow","response","put","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","onConditionChange","prefill","onClick","_c","$RefreshReg$"],"sources":["/home/aditya/Desktop/frontend workflow/workflow12/src/components/EditWorkflow.jsx"],"sourcesContent":["// src/components/EditWorkflow.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport ConditionRow from \"./ConditionRow\";\r\n\r\nconst EditWorkflow = () => {\r\n  const [rows, setRows] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const [saveMessage, setSaveMessage] = useState(\"\");\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { workflow } = location.state;\r\n\r\n  useEffect(() => {\r\n    if (workflow) {\r\n      setRows(workflow.steps);\r\n    }\r\n  }, [workflow]);\r\n\r\n  const addRow = () => {\r\n    setRows((prevRows) => [...prevRows, {}]);\r\n    setError(\"\");\r\n  };\r\n\r\n  const handleConditionChange = (index, condition) => {\r\n    setRows((prevRows) => {\r\n      const updatedRows = [...prevRows];\r\n      updatedRows[index] = condition;\r\n      return updatedRows;\r\n    });\r\n  };\r\n\r\n  const validateRows = () => {\r\n    return true;\r\n    // Add your validation logic here\r\n  };\r\n\r\n  const handleUpdateClick = async () => {\r\n    if (validateRows()) {\r\n      const updatedWorkflow = {\r\n        ...workflow,\r\n        steps: rows,\r\n      };\r\n\r\n      try {\r\n        const response = await axios.put(\r\n          `http://localhost:8080/workflows/${workflow.id}`,\r\n          updatedWorkflow\r\n        );\r\n        setSaveMessage(\"Workflow updated successfully!\");\r\n        setError(\"\");\r\n        navigate(\"/view-workflows\");\r\n      } catch (error) {\r\n        setError(\"Error updating workflow. Please try again.\");\r\n      }\r\n    } else {\r\n      setError(\"Please fill in all fields correctly before saving.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"condition-list-container\">\r\n      <h1>Edit Workflow</h1>\r\n      {rows.map((row, index) => (\r\n        <ConditionRow\r\n          key={index}\r\n          index={index}\r\n          onConditionChange={handleConditionChange}\r\n          prefill={row}\r\n        />\r\n      ))}\r\n      <div>\r\n        <button className=\"button\" onClick={addRow}>\r\n          Add Condition\r\n        </button>\r\n        <button className=\"button\" onClick={handleUpdateClick}>\r\n          Update Workflow\r\n        </button>\r\n      </div>\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      {saveMessage && <div className=\"success-message\">{saveMessage}</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditWorkflow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}