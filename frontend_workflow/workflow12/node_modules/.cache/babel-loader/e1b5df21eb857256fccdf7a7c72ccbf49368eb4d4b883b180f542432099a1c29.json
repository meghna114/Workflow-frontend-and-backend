{"ast":null,"code":"var _jsxFileName = \"/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\nimport axios from 'axios';\nimport CustomEdge from './CustomEdge';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ViewTree = () => {\n  _s();\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const reactFlowWrapper = useRef(null);\n\n  // Function to perform topological sorting and return a map with indices\n  const topologicalSortWithIndex = graph => {\n    const visited = new Set();\n    const stack = [];\n    const indexMap = new Map();\n    const visit = node => {\n      if (visited.has(node)) return;\n      visited.add(node);\n      if (graph[node]) {\n        Object.keys(graph[node]).forEach(neighbor => visit(neighbor));\n      }\n      stack.push(node);\n    };\n    Object.keys(graph).forEach(visit);\n    const sortedNodes = stack.reverse();\n\n    // Build the index map\n    sortedNodes.forEach((node, index) => {\n      indexMap.set(node, index);\n    });\n    return indexMap;\n  };\n  const updateSubtreeValues = graph => {\n    const result = JSON.parse(JSON.stringify(graph)); // Deep copy to avoid mutating the original graph\n\n    const updateSubtree = node => {\n      if (!result[node]) return;\n\n      // If the node has a number value of 0, update its subtree\n      Object.keys(result[node]).forEach(target => {\n        const {\n          key\n        } = result[node][target];\n        if (key === 0) {\n          // Update the current node and all nodes in the subtree\n          updateSubtreeRecursive(target);\n        }\n      });\n    };\n    const updateSubtreeRecursive = node => {\n      if (!result[node]) return;\n      // Set the number value of the current node to 0\n      Object.keys(result[node]).forEach(target => {\n        result[node][target].key = 0;\n        updateSubtreeRecursive(target);\n      });\n    };\n    Object.keys(result).forEach(updateSubtree);\n    return result;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        //   const response = {\n        //     \"GenderCheck\": {\n        //         \"PincodeCheck\": {\n        //             \"key\": 0,\n        //             \"value\": \"Male\"\n        //         },\n        //         \"LoanStatus\": {\n        //             \"key\": 2,\n        //             \"value\": \"Female\"\n        //         }\n        //     },\n        //     \"PincodeCheck\": {\n        //         \"LoanStatus\": {\n        //             \"key\": 3,\n        //             \"value\": \"Starts with 40\"\n        //         }\n        //     },\n        //     \"DobCheck\": {\n        //         \"GenderCheck\": {\n        //             \"key\": 0,\n        //             \"value\": \"age>25\"\n        //         }\n        //     }\n        // };\n        const response = {\n          a: {\n            b: {\n              key: 1,\n              value: \"B\"\n            },\n            c: {\n              key: 1,\n              value: \"C\"\n            }\n          },\n          b: {\n            d: {\n              key: 0,\n              value: \"D\"\n            },\n            e: {\n              key: 0,\n              value: \"E\"\n            }\n          },\n          c: {\n            f: {\n              key: 0,\n              value: \"F\"\n            },\n            g: {\n              key: 1,\n              value: \"G\"\n            }\n          },\n          g: {\n            h: {\n              key: 2,\n              value: \"H\"\n            },\n            i: {\n              key: 0,\n              value: \"A\"\n            }\n          }\n        };\n        const newresp = updateSubtreeValues(response);\n        console.log(newresp);\n        processGraphData(newresp);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  let ypos = 0,\n    xpos = 1000,\n    xchange = 50,\n    flag = 1;\n  const processGraphData = data => {\n    const newNodes = [];\n    const newEdges = [];\n    const positions = {};\n    const indexMap = topologicalSortWithIndex(data);\n    console.log(indexMap);\n\n    // Function to calculate position\n    const calculatePosition = node => {\n      if (!positions[node]) {\n        const curr = flag * xchange;\n        positions[node] = {\n          x: xpos + curr,\n          y: 100 * indexMap.get(node)\n        };\n        console.log(positions[node]);\n        console.log(xpos, xchange);\n        if (flag == 1) flag = -1;else flag = 1;\n        ypos += 100;\n        xchange += 50;\n      }\n      return positions[node];\n    };\n    const getEdgeColor = key => {\n      switch (key) {\n        case 0:\n          return 'gray';\n        case 1:\n          return 'green';\n        case 2:\n          return 'yellow';\n        case 3:\n          return 'orange';\n        default:\n          return 'black';\n      }\n    };\n    Object.keys(data).forEach(source => {\n      if (!newNodes.find(node => node.id === source)) {\n        newNodes.push({\n          id: source,\n          data: {\n            label: source\n          },\n          position: calculatePosition(source)\n        });\n      }\n      Object.keys(data[source]).forEach(target => {\n        if (!newNodes.find(node => node.id === target)) {\n          newNodes.push({\n            id: target,\n            data: {\n              label: target\n            },\n            position: calculatePosition(target)\n          });\n        }\n        const {\n          key,\n          value\n        } = data[source][target];\n        console.log(key);\n        newEdges.push({\n          id: `e${source}-${target}`,\n          source,\n          target,\n          type: CustomEdge,\n          label: value,\n          markerEnd: {\n            type: 'arrow'\n          },\n          style: {\n            stroke: getEdgeColor(key)\n          } // Coloring based on key\n        });\n      });\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh'\n    },\n    ref: reactFlowWrapper,\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Background, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewTree, \"jhHm/61oZxklEsWL1oW/Uo9Ucq4=\");\n_c = ViewTree;\nexport default ViewTree;\n\n// import React, { useEffect, useState, useRef } from 'react';\n// import ReactFlow, { MiniMap, Controls, Background, ReactFlowProvider } from 'react-flow-renderer';\n// import axios from 'axios';\n// import CustomEdge from './CustomEdge';\n\n// // Function to perform topological sorting and return a map with indices\n// const topologicalSortWithIndex = (graph) => {\n//   const visited = new Set();\n//   const stack = [];\n//   const indexMap = new Map();\n\n//   const visit = (node) => {\n//     if (visited.has(node)) return;\n//     visited.add(node);\n//     if (graph[node]) {\n//       Object.keys(graph[node]).forEach((neighbor) => visit(neighbor));\n//     }\n//     stack.push(node);\n//   };\n\n//   Object.keys(graph).forEach(visit);\n//   const sortedNodes = stack.reverse();\n\n//   // Build the index map\n//   sortedNodes.forEach((node, index) => {\n//     indexMap.set(node, index);\n//   });\n\n//   return indexMap;\n// };\n\n// const edgeTypes = {\n//   custom: CustomEdge,\n// };\n\n// const ViewTree = () => {\n//   const [nodes, setNodes] = useState([]);\n//   const [edges, setEdges] = useState([]);\n//   const reactFlowWrapper = useRef(null);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await axios.get('http://localhost:8080/api/graph-data');\n//         const data = response.data;\n//         processGraphData(data);\n//       } catch (error) {\n//         console.error('Error fetching data:', error);\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const processGraphData = (data) => {\n//     const newNodes = [];\n//     const newEdges = [];\n//     const indexMap = topologicalSortWithIndex(data);\n//     const positions = {};\n//     let yOffset = 0;\n\n//     // Function to calculate position based on index\n//     const calculatePosition = (node) => {\n//       if (!positions[node]) {\n//         positions[node] = { x: 250, y: yOffset + indexMap.get(node) * 100 };\n//       }\n//       return positions[node];\n//     };\n\n//     // Function to determine the edge color based on the key value\n//     const getEdgeColor = (key) => {\n//       switch (key) {\n//         case 0:\n//           return 'gray';\n//         case 1:\n//           return 'green';\n//         case 2:\n//           return 'yellow';\n//         case 3:\n//           return 'orange';\n//         default:\n//           return 'black';\n//       }\n//     };\n\n//     Object.keys(data).forEach((source) => {\n//       if (!newNodes.find((node) => node.id === source)) {\n//         newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\n//       }\n//       if (data[source]) {\n//         Object.keys(data[source]).forEach((target) => {\n//           if (!newNodes.find((node) => node.id === target)) {\n//             newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\n//           }\n//           const { key, value } = data[source][target];\n//           newEdges.push({\n//             id: `e${source}-${target}`,\n//             source,\n//             target,\n//             type: 'custom',\n//             data: { label: value },\n//             style: { stroke: getEdgeColor(key) },\n//             markerEnd: {\n//               type: 'arrowclosed',\n//             },\n//           });\n//         });\n//       }\n//     });\n\n//     setNodes(newNodes);\n//     setEdges(newEdges);\n//   };\n\n//   return (\n//     <div style={{ height: '100vh' }} ref={reactFlowWrapper}>\n//       <ReactFlowProvider>\n//         <ReactFlow nodes={nodes} edges={edges} edgeTypes={edgeTypes} fitView>\n//           <MiniMap />\n//           <Controls />\n//           <Background />\n//         </ReactFlow>\n//       </ReactFlowProvider>\n//     </div>\n//   );\n// };\n\n// export default ViewTree;\nvar _c;\n$RefreshReg$(_c, \"ViewTree\");","map":{"version":3,"names":["React","useEffect","useState","useRef","ReactFlow","MiniMap","Controls","Background","axios","CustomEdge","jsxDEV","_jsxDEV","ViewTree","_s","nodes","setNodes","edges","setEdges","reactFlowWrapper","topologicalSortWithIndex","graph","visited","Set","stack","indexMap","Map","visit","node","has","add","Object","keys","forEach","neighbor","push","sortedNodes","reverse","index","set","updateSubtreeValues","result","JSON","parse","stringify","updateSubtree","target","key","updateSubtreeRecursive","fetchData","response","a","b","value","c","d","e","f","g","h","i","newresp","console","log","processGraphData","error","ypos","xpos","xchange","flag","data","newNodes","newEdges","positions","calculatePosition","curr","x","y","get","getEdgeColor","source","find","id","label","position","type","markerEnd","style","stroke","height","ref","children","fitView","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/aditya/Desktop/frontend workflow/workflow12/src/components/ViewTree.jsx"],"sourcesContent":["\r\n\r\n\r\n\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport ReactFlow, { MiniMap, Controls, Background } from 'react-flow-renderer';\r\nimport axios from 'axios';\r\nimport CustomEdge from './CustomEdge'\r\nconst ViewTree = () => {\r\n  const [nodes, setNodes] = useState([]);\r\n  const [edges, setEdges] = useState([]);\r\n  const reactFlowWrapper = useRef(null);\r\n\r\n\r\n  // Function to perform topological sorting and return a map with indices\r\n  const topologicalSortWithIndex = (graph) => {\r\n    const visited = new Set();\r\n    const stack = [];\r\n    const indexMap = new Map();\r\n    \r\n    const visit = (node) => {\r\n      if (visited.has(node)) return;\r\n      visited.add(node);\r\n      if (graph[node]) {\r\n        Object.keys(graph[node]).forEach((neighbor) => visit(neighbor));\r\n      }\r\n      stack.push(node);\r\n    };\r\n\r\n    Object.keys(graph).forEach(visit);\r\n    const sortedNodes = stack.reverse();\r\n    \r\n    // Build the index map\r\n    sortedNodes.forEach((node, index) => {\r\n      indexMap.set(node, index);\r\n    });\r\n\r\n    return indexMap;\r\n  };\r\n\r\n\r\n  const updateSubtreeValues = (graph) => {\r\n    const result = JSON.parse(JSON.stringify(graph)); // Deep copy to avoid mutating the original graph\r\n  \r\n    const updateSubtree = (node) => {\r\n      if (!result[node]) return;\r\n      \r\n      // If the node has a number value of 0, update its subtree\r\n      Object.keys(result[node]).forEach((target) => {\r\n        const { key } = result[node][target];\r\n        if (key === 0) {\r\n          // Update the current node and all nodes in the subtree\r\n          updateSubtreeRecursive(target);\r\n        }\r\n      });\r\n    };\r\n  \r\n    const updateSubtreeRecursive = (node) => {\r\n      if (!result[node]) return;\r\n      // Set the number value of the current node to 0\r\n      Object.keys(result[node]).forEach((target) => {\r\n        result[node][target].key = 0;\r\n        updateSubtreeRecursive(target);\r\n      });\r\n    };\r\n  \r\n    Object.keys(result).forEach(updateSubtree);\r\n    return result;\r\n  };\r\n  \r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n      //   const response = {\r\n      //     \"GenderCheck\": {\r\n      //         \"PincodeCheck\": {\r\n      //             \"key\": 0,\r\n      //             \"value\": \"Male\"\r\n      //         },\r\n      //         \"LoanStatus\": {\r\n      //             \"key\": 2,\r\n      //             \"value\": \"Female\"\r\n      //         }\r\n      //     },\r\n      //     \"PincodeCheck\": {\r\n      //         \"LoanStatus\": {\r\n      //             \"key\": 3,\r\n      //             \"value\": \"Starts with 40\"\r\n      //         }\r\n      //     },\r\n      //     \"DobCheck\": {\r\n      //         \"GenderCheck\": {\r\n      //             \"key\": 0,\r\n      //             \"value\": \"age>25\"\r\n      //         }\r\n      //     }\r\n      // };\r\n      const response = {\r\n        a: {\r\n          b: {\r\n            key: 1,\r\n            value: \"B\",\r\n          },\r\n          c: {\r\n            key: 1,\r\n            value: \"C\",\r\n          },\r\n        },\r\n        b: {\r\n          d: {\r\n            key: 0,\r\n            value: \"D\",\r\n          },\r\n          e: {\r\n            key: 0,\r\n            value: \"E\",\r\n          },\r\n        },\r\n        c: {\r\n          f: {\r\n            key: 0,\r\n            value: \"F\",\r\n          },\r\n          g: {\r\n            key: 1,\r\n            value: \"G\",\r\n          },\r\n        },\r\n        g: {\r\n          h: {\r\n            key: 2,\r\n            value: \"H\",\r\n          },\r\n          i: {\r\n            key: 0,\r\n            value: \"A\",\r\n          },\r\n        },\r\n      };\r\n\r\n      const newresp = updateSubtreeValues(response);\r\n       console.log(newresp);\r\n        processGraphData(newresp);\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  let ypos = 0, xpos = 1000, xchange = 50, flag = 1;\r\n\r\n  const processGraphData = (data) => {\r\n    const newNodes = [];\r\n    const newEdges = [];\r\n    const positions = {};\r\n    const indexMap = topologicalSortWithIndex(data);\r\n    console.log(indexMap);\r\n\r\n    // Function to calculate position\r\n    const calculatePosition = (node) => {\r\n      if (!positions[node]) {\r\n        const curr = (flag*xchange);\r\n        positions[node] = { x: xpos+curr, y: 100*indexMap.get(node) };\r\n        console.log(positions[node]);\r\n        console.log(xpos, xchange);\r\n        if(flag == 1) flag = -1;\r\n        else flag = 1;\r\n        ypos += 100;\r\n        xchange += 50;\r\n      }\r\n      return positions[node];\r\n    };\r\n\r\n\r\n    const getEdgeColor = (key) => {\r\n      switch (key) {\r\n        case 0:\r\n          return 'gray';\r\n        case 1:\r\n          return 'green';\r\n        case 2:\r\n          return 'yellow';\r\n        case 3:\r\n          return 'orange';\r\n        default:\r\n          return 'black';\r\n      }\r\n    };\r\n\r\n    Object.keys(data).forEach((source) => {\r\n      if (!newNodes.find((node) => node.id === source)) {\r\n        newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n      }\r\n      Object.keys(data[source]).forEach((target) => {\r\n        if (!newNodes.find((node) => node.id === target)) {\r\n          newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n        }\r\n        const { key, value } = data[source][target];\r\n        console.log(key);\r\n        newEdges.push({\r\n          id: `e${source}-${target}`,\r\n          source,\r\n          target,\r\n          type: CustomEdge,\r\n          label: value,\r\n          markerEnd: {\r\n            type: 'arrow',\r\n          },\r\n          style: { stroke: getEdgeColor(key) }, // Coloring based on key\r\n        });\r\n      });\r\n    });\r\n\r\n    setNodes(newNodes);\r\n    setEdges(newEdges);\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: '100vh' }} ref={reactFlowWrapper}>\r\n      <ReactFlow nodes={nodes} edges={edges} fitView>\r\n        <MiniMap />\r\n        <Controls />\r\n        <Background />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ViewTree;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState, useRef } from 'react';\r\n// import ReactFlow, { MiniMap, Controls, Background, ReactFlowProvider } from 'react-flow-renderer';\r\n// import axios from 'axios';\r\n// import CustomEdge from './CustomEdge';\r\n\r\n// // Function to perform topological sorting and return a map with indices\r\n// const topologicalSortWithIndex = (graph) => {\r\n//   const visited = new Set();\r\n//   const stack = [];\r\n//   const indexMap = new Map();\r\n  \r\n//   const visit = (node) => {\r\n//     if (visited.has(node)) return;\r\n//     visited.add(node);\r\n//     if (graph[node]) {\r\n//       Object.keys(graph[node]).forEach((neighbor) => visit(neighbor));\r\n//     }\r\n//     stack.push(node);\r\n//   };\r\n\r\n//   Object.keys(graph).forEach(visit);\r\n//   const sortedNodes = stack.reverse();\r\n  \r\n//   // Build the index map\r\n//   sortedNodes.forEach((node, index) => {\r\n//     indexMap.set(node, index);\r\n//   });\r\n\r\n//   return indexMap;\r\n// };\r\n\r\n// const edgeTypes = {\r\n//   custom: CustomEdge,\r\n// };\r\n\r\n// const ViewTree = () => {\r\n//   const [nodes, setNodes] = useState([]);\r\n//   const [edges, setEdges] = useState([]);\r\n//   const reactFlowWrapper = useRef(null);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const response = await axios.get('http://localhost:8080/api/graph-data');\r\n//         const data = response.data;\r\n//         processGraphData(data);\r\n//       } catch (error) {\r\n//         console.error('Error fetching data:', error);\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const processGraphData = (data) => {\r\n//     const newNodes = [];\r\n//     const newEdges = [];\r\n//     const indexMap = topologicalSortWithIndex(data);\r\n//     const positions = {};\r\n//     let yOffset = 0;\r\n\r\n//     // Function to calculate position based on index\r\n//     const calculatePosition = (node) => {\r\n//       if (!positions[node]) {\r\n//         positions[node] = { x: 250, y: yOffset + indexMap.get(node) * 100 };\r\n//       }\r\n//       return positions[node];\r\n//     };\r\n\r\n//     // Function to determine the edge color based on the key value\r\n//     const getEdgeColor = (key) => {\r\n//       switch (key) {\r\n//         case 0:\r\n//           return 'gray';\r\n//         case 1:\r\n//           return 'green';\r\n//         case 2:\r\n//           return 'yellow';\r\n//         case 3:\r\n//           return 'orange';\r\n//         default:\r\n//           return 'black';\r\n//       }\r\n//     };\r\n\r\n//     Object.keys(data).forEach((source) => {\r\n//       if (!newNodes.find((node) => node.id === source)) {\r\n//         newNodes.push({ id: source, data: { label: source }, position: calculatePosition(source) });\r\n//       }\r\n//       if (data[source]) {\r\n//         Object.keys(data[source]).forEach((target) => {\r\n//           if (!newNodes.find((node) => node.id === target)) {\r\n//             newNodes.push({ id: target, data: { label: target }, position: calculatePosition(target) });\r\n//           }\r\n//           const { key, value } = data[source][target];\r\n//           newEdges.push({\r\n//             id: `e${source}-${target}`,\r\n//             source,\r\n//             target,\r\n//             type: 'custom',\r\n//             data: { label: value },\r\n//             style: { stroke: getEdgeColor(key) },\r\n//             markerEnd: {\r\n//               type: 'arrowclosed',\r\n//             },\r\n//           });\r\n//         });\r\n//       }\r\n//     });\r\n\r\n//     setNodes(newNodes);\r\n//     setEdges(newEdges);\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ height: '100vh' }} ref={reactFlowWrapper}>\r\n//       <ReactFlowProvider>\r\n//         <ReactFlow nodes={nodes} edges={edges} edgeTypes={edgeTypes} fitView>\r\n//           <MiniMap />\r\n//           <Controls />\r\n//           <Background />\r\n//         </ReactFlow>\r\n//       </ReactFlowProvider>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ViewTree;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}